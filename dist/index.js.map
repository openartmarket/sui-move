{"version":3,"sources":["../src/burn_contract_stock.ts","../src/helpers.ts","../src/contract.ts","../src/end_request_voting.ts","../src/findObjectsWithOwnerAddress.ts","../src/getters.ts","../src/getAvailableStock.ts","../src/merge_contract_stock.ts","../src/mint_contract_stock.ts","../src/split_contract_stock.ts","../src/toContractStock.ts","../src/transfer_contract_stock.ts","../src/update_contract_outgoing_price.ts","../src/vote.ts","../src/vote_request.ts"],"sourcesContent":["import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { getSigner, handleTransactionResponse } from \"./helpers.js\";\nimport type { BurnContractParams } from \"./types.js\";\n\nexport async function burnContractStock(\n  client: SuiClient,\n  params: BurnContractParams,\n): Promise<void> {\n  const { contractStockId, contractId, packageId, signerPhrase } = params;\n  const { keypair } = getSigner(signerPhrase);\n  const tx = new TransactionBlock();\n\n  tx.moveCall({\n    target: `${packageId}::open_art_market::safe_burn_contract_stock`,\n    arguments: [tx.object(contractId), tx.object(contractStockId)],\n  });\n\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showEffects: true,\n    },\n  });\n  handleTransactionResponse(txRes);\n}\n","import type { SuiObjectChangeCreated, SuiTransactionBlockResponse } from \"@mysten/sui.js/client\";\nimport { Ed25519Keypair } from \"@mysten/sui.js/keypairs/ed25519\";\n\nimport type {\n  MergeStockMoveTransactionParams,\n  SplitStockMoveTransactionParams,\n  TransferStockMoveTransactionParams,\n  VoteMoveTransactionParams,\n} from \"./types.js\";\n\nexport function getSigner(phrase: string): {\n  keypair: Ed25519Keypair;\n  address: string;\n} {\n  if (!phrase) throw new Error(\"No phrase provided\");\n  const keypair = Ed25519Keypair.deriveKeypair(phrase);\n  const address = keypair.getPublicKey().toSuiAddress();\n  return { keypair, address };\n}\n\nexport function handleTransactionResponse(txRes: SuiTransactionBlockResponse): void {\n  const status = getExecutionStatus(txRes);\n  if (status !== \"success\") {\n    throw new Error(`Transaction failed with status: ${status}`);\n  }\n}\n\nfunction getExecutionStatus(txRes: SuiTransactionBlockResponse): string {\n  const status = txRes.effects?.status;\n  if (status === undefined) {\n    throw new Error(\"Failed to get execution status\");\n  }\n  if (status.error) {\n    throw new Error(status.error);\n  }\n  return status.status;\n}\n\nexport function getCreatedObjects(txRes: SuiTransactionBlockResponse): SuiObjectChangeCreated[] {\n  return (txRes.objectChanges || []).filter(\n    (change) => change.type === \"created\",\n  ) as SuiObjectChangeCreated[];\n}\n\nexport function transferMoveCall({\n  tx,\n  packageId,\n  contractId,\n  contractStockId,\n  receiverAddress,\n}: TransferStockMoveTransactionParams): void {\n  tx.moveCall({\n    target: `${packageId}::open_art_market::transfer_contract_stock`,\n    arguments: [tx.object(contractId), tx.pure(contractStockId), tx.pure(receiverAddress)],\n  });\n}\nexport function mergeMoveCall({\n  tx,\n  packageId,\n  toContractStockId,\n  fromContractStockId,\n}: MergeStockMoveTransactionParams): void {\n  tx.moveCall({\n    target: `${packageId}::open_art_market::merge_contract_stocks`,\n    arguments: [tx.object(toContractStockId), tx.object(fromContractStockId)],\n  });\n}\nexport function splitMoveCall({\n  tx,\n  packageId,\n  contractStockId,\n  quantity,\n}: SplitStockMoveTransactionParams): void {\n  tx.moveCall({\n    target: `${packageId}::open_art_market::split_contract_stock`,\n    arguments: [tx.object(contractStockId), tx.pure(quantity)],\n  });\n}\nexport function voteMoveCall({\n  tx,\n  packageId,\n  contractId,\n  voteRequest,\n  choice,\n}: VoteMoveTransactionParams): void {\n  tx.moveCall({\n    target: `${packageId}::dao::vote`,\n    arguments: [tx.object(contractId), tx.object(voteRequest), tx.pure(choice)],\n  });\n}\n","import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { getCreatedObjects, getSigner, handleTransactionResponse } from \"./helpers.js\";\nimport type { MintContractParams } from \"./types.js\";\n/**\n * Mints a new contract\n * @param params\n * @returns the contract id\n */\nexport async function mintContract(client: SuiClient, params: MintContractParams): Promise<string> {\n  const {\n    adminCapId,\n    packageId,\n    signerPhrase,\n    totalShareCount,\n    sharePrice,\n    outgoingPrice,\n    name,\n    artist,\n    creationTimestampMillis,\n    description,\n    currency,\n    image,\n  } = params;\n\n  // console.log(\"Mint contract: %s\", name + \" by \" + artist);\n\n  const { keypair } = getSigner(signerPhrase);\n  const tx = new TransactionBlock();\n\n  tx.moveCall({\n    target: `${packageId}::open_art_market::mint_contract`,\n    arguments: [\n      tx.object(adminCapId),\n      tx.pure(totalShareCount),\n      tx.pure(sharePrice),\n      tx.pure(outgoingPrice),\n      tx.pure(name),\n      tx.pure(artist),\n      tx.pure(creationTimestampMillis),\n      tx.pure(description),\n      tx.pure(currency),\n      tx.pure(image),\n    ],\n  });\n\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showObjectChanges: true,\n      showEffects: true,\n    },\n  });\n\n  handleTransactionResponse(txRes);\n  const contractId = getCreatedObjects(txRes)?.[0].objectId;\n  if (!contractId) throw new Error(\"Could not mint contract\");\n\n  return contractId;\n}\n","import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { getSigner, handleTransactionResponse } from \"./helpers.js\";\nimport type { EndVoteRequestParams } from \"./types.js\";\n\nexport async function endRequestVoting(\n  client: SuiClient,\n  { voteRequest, packageId, signerPhrase, adminCapId }: EndVoteRequestParams,\n) {\n  const { keypair } = getSigner(signerPhrase);\n  const tx = new TransactionBlock();\n\n  tx.moveCall({\n    target: `${packageId}::dao::end_vote`,\n    arguments: [tx.object(adminCapId), tx.object(voteRequest)],\n  });\n\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showEffects: true,\n    },\n  });\n  handleTransactionResponse(txRes);\n\n  return \"success\";\n}\n","import type { SuiObjectChangeCreated, SuiTransactionBlockResponse } from \"@mysten/sui.js/client\";\n\nimport { getCreatedObjects } from \"./helpers.js\";\n\nexport function findObjectsWithOwnerAddress(\n  txRes: SuiTransactionBlockResponse,\n  address: string,\n): SuiObjectChangeCreated[] {\n  const objects = getCreatedObjects(txRes);\n  return objects.filter((obj) => {\n    if (typeof obj.owner === \"string\") return false;\n    return \"AddressOwner\" in obj.owner && obj.owner.AddressOwner === address;\n  });\n}\n","import type {\n  MoveStruct,\n  SuiObjectData,\n  SuiObjectResponse,\n  SuiParsedData,\n} from \"@mysten/sui.js/dist/cjs/client\";\n\nexport function getObjectData(response: SuiObjectResponse): SuiObjectData {\n  const { error, data } = response;\n  if (error) {\n    throw new Error(`response error: ${JSON.stringify(response)}`);\n  }\n  if (!data) {\n    throw new Error(`No data: ${JSON.stringify(response)}`);\n  }\n  return data;\n}\n\nexport function getParsedData(data: SuiObjectData): SuiParsedData {\n  const { content } = data;\n  if (!content) {\n    throw new Error(`No content: ${JSON.stringify(data)}`);\n  }\n  return content;\n}\n\nexport function getStringField(data: SuiParsedData, key: string): string {\n  const { dataType } = data;\n  if (dataType !== \"moveObject\") {\n    throw new Error(`Unexpected txn.data.content.dataType: ${JSON.stringify(data)}`);\n  }\n  const { fields } = data;\n  if (!fields) {\n    throw new Error(`No txn.data.content.fields: ${JSON.stringify(data)}`);\n  }\n\n  function getStringField(struct: MoveStruct, key: string): string {\n    if (Array.isArray(struct)) {\n      throw new Error(`Unexpected response.data.content.fields as array: ${JSON.stringify(data)}`);\n    }\n    if (!(key in struct)) {\n      throw new Error(`No response.data.content.fields[${key}]: ${JSON.stringify(data)}`);\n    }\n    const value = Reflect.get(struct, key);\n    if (typeof value !== \"string\") {\n      throw new Error(\n        `Unexpected type for response.data.content.fields[${key}]: ${JSON.stringify(data)}`,\n      );\n    }\n    return value;\n  }\n\n  return getStringField(fields, key);\n}\n\nexport function getIntField(data: SuiParsedData, key: string): number {\n  const value = getStringField(data, key);\n  return toInt(value);\n}\n\nfunction toInt(s: string) {\n  if (!s.match(/^[0-9]+$/)) {\n    throw new Error(`${s} is not a valid integer`);\n  }\n  const number = parseInt(s, 10);\n  if (isNaN(number) || !Number.isInteger(number)) {\n    throw new Error(`${s} is not a valid integer`);\n  }\n  return number;\n}\n","import type { SuiClient } from \"@mysten/sui.js/dist/cjs/client\";\n\nimport { getIntField, getObjectData, getParsedData } from \"./getters.js\";\n\nexport async function getAvailableStock(client: SuiClient, contractId: string): Promise<number> {\n  const response = await client.getObject({\n    id: contractId,\n    options: { showContent: true },\n  });\n  const objectData = getObjectData(response);\n  const parsedData = getParsedData(objectData);\n  return getIntField(parsedData, \"shares\");\n}\n","import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { getSigner, handleTransactionResponse, mergeMoveCall } from \"./helpers\";\nimport type { MergeContractStockParams } from \"./types\";\n\nexport async function mergeContractStock(\n  client: SuiClient,\n  params: MergeContractStockParams,\n): Promise<void> {\n  const { toContractStockId, fromContractStockId, signerPhrase, packageId } = params;\n  const { keypair } = getSigner(signerPhrase);\n  const tx = new TransactionBlock();\n\n  mergeMoveCall({\n    tx,\n    packageId,\n    toContractStockId,\n    fromContractStockId,\n  });\n\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showEffects: true,\n      showObjectChanges: true,\n    },\n  });\n\n  handleTransactionResponse(txRes);\n}\n","import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { findObjectsWithOwnerAddress } from \"./findObjectsWithOwnerAddress\";\nimport { getSigner, handleTransactionResponse } from \"./helpers\";\nimport type {\n  BatchMintContractStockParams,\n  BatchMintContractStockResult,\n  BuyShareResult,\n  MintContractStockParams,\n  MintContractStockResult,\n} from \"./types\";\n\n/**\n * Mints an contract stock\n * @returns contract stock id\n */\nexport async function mintContractStock(\n  client: SuiClient,\n  params: MintContractStockParams,\n): Promise<MintContractStockResult> {\n  const { contractId, signerPhrase, receiverAddress, packageId, adminCapId, quantity } = params;\n  const { keypair } = getSigner(signerPhrase);\n\n  const tx = new TransactionBlock();\n\n  tx.moveCall({\n    target: `${packageId}::open_art_market::mint_contract_stock`,\n    arguments: [\n      tx.object(adminCapId),\n      tx.object(contractId),\n      tx.pure(quantity),\n      tx.pure(receiverAddress),\n    ],\n  });\n\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showObjectChanges: true,\n      showEffects: true,\n    },\n  });\n  handleTransactionResponse(txRes);\n  const contractStocks = findObjectsWithOwnerAddress(txRes, receiverAddress);\n  if (contractStocks.length !== 1)\n    throw new Error(`Expected 1 contract stock id, got ${JSON.stringify(contractStocks)}`);\n  const contractStockId = contractStocks[0].objectId;\n  const { digest } = txRes;\n  return { contractStockId, digest };\n}\n\nexport async function batchMintContractStock(\n  client: SuiClient,\n  params: BatchMintContractStockParams,\n): Promise<BatchMintContractStockResult> {\n  const { signerPhrase, packageId, adminCapId, list } = params;\n  const { keypair } = getSigner(signerPhrase);\n\n  const tx = new TransactionBlock();\n\n  for (const { contractId, receiverAddress, quantity } of list) {\n    tx.moveCall({\n      target: `${packageId}::open_art_market::mint_contract_stock`,\n      arguments: [\n        tx.object(adminCapId),\n        tx.object(contractId),\n        tx.pure(quantity),\n        tx.pure(receiverAddress),\n      ],\n    });\n  }\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showObjectChanges: true,\n      showEffects: true,\n    },\n  });\n  handleTransactionResponse(txRes);\n\n  const results: BuyShareResult[] = [];\n\n  for (const { receiverAddress } of list) {\n    const contractStockIds = findObjectsWithOwnerAddress(txRes, receiverAddress).map(\n      (obj) => obj.objectId,\n    );\n    for (const contractStockId of contractStockIds) {\n      const contractStock = await client.getObject({\n        id: contractStockId,\n        options: { showContent: true },\n      });\n      if (!contractStock.data?.content)\n        throw new Error(\n          `No content found for contractStockId=${contractStockId}: ${JSON.stringify(\n            contractStock,\n            null,\n            2,\n          )}`,\n        );\n      const content = contractStock.data.content;\n      results.push({\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        contractId: content.fields.contract_id,\n        contractStockId,\n        digest: txRes.digest,\n        receiverAddress,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        quantity: +content.fields.shares,\n      });\n    }\n  }\n  const { digest } = txRes;\n  return { digest, results };\n}\n","import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { findObjectsWithOwnerAddress } from \"./findObjectsWithOwnerAddress\";\nimport { getSigner, handleTransactionResponse, splitMoveCall } from \"./helpers\";\nimport type { ContractStockDetails, SplitContractStockParams } from \"./types\";\n\nexport async function splitContractStock(\n  client: SuiClient,\n  params: SplitContractStockParams,\n): Promise<ContractStockDetails> {\n  const { contractStockId, signerPhrase, quantity, packageId } = params;\n  const { keypair } = getSigner(signerPhrase);\n  const address = keypair.getPublicKey().toSuiAddress();\n  const tx = new TransactionBlock();\n\n  splitMoveCall({ tx, packageId, contractStockId, quantity });\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showEffects: true,\n      showObjectChanges: true,\n    },\n  });\n\n  handleTransactionResponse(txRes);\n\n  const contractStocks = findObjectsWithOwnerAddress(txRes, address);\n  if (contractStocks.length !== 1)\n    throw new Error(`Expected 1 contract stock, got ${JSON.stringify(contractStocks)}`);\n  const newContractStockId = contractStocks[0].objectId;\n  return {\n    contractStockId: newContractStockId,\n  };\n}\n","import type { SuiObjectResponse } from \"@mysten/sui.js/dist/cjs/client\";\n\nimport { getIntField, getObjectData, getParsedData, getStringField } from \"./getters\";\n\nexport type ContractStock = {\n  contractStockId: string;\n  digest: string;\n  contractId: string;\n  quantity: number;\n  productId: string;\n};\n\nexport function toContractStock(response: SuiObjectResponse): ContractStock {\n  const objectData = getObjectData(response);\n  const parsedData = getParsedData(objectData);\n\n  return {\n    contractStockId: objectData.objectId,\n    digest: objectData.digest,\n    contractId: getStringField(parsedData, \"contract_id\"),\n    quantity: getIntField(parsedData, \"shares\"),\n    productId: getStringField(parsedData, \"reference\"),\n  };\n}\n","import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { getSigner, handleTransactionResponse, transferMoveCall } from \"./helpers\";\nimport type { TransferContractStockParams, TransferContractStockResult } from \"./types\";\n\n/**\n * Transfers an contract stock\n * @returns contract stock id\n */\nexport async function transferContractStock(\n  client: SuiClient,\n  params: TransferContractStockParams,\n): Promise<TransferContractStockResult> {\n  const { contractId, signerPhrase, receiverAddress, contractStockId, packageId } = params;\n  const { keypair } = getSigner(signerPhrase);\n  const tx = new TransactionBlock();\n\n  transferMoveCall({ tx, packageId, contractId, contractStockId, receiverAddress });\n\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showObjectChanges: true,\n      showEffects: true,\n    },\n  });\n\n  handleTransactionResponse(txRes);\n  const { digest } = txRes;\n  return { digest };\n}\n","import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { getSigner, handleTransactionResponse } from \"./helpers\";\nimport type { UpdateOutgoingPriceParams } from \"./types\";\n\nexport async function updateOutgoingPrice(\n  client: SuiClient,\n  { contractId, newOutgoingPrice, packageId, adminCapId, signerPhrase }: UpdateOutgoingPriceParams,\n) {\n  const { keypair } = getSigner(signerPhrase);\n  const tx = new TransactionBlock();\n\n  tx.moveCall({\n    target: `${packageId}::open_art_market::update_outgoing_price`,\n    arguments: [tx.object(adminCapId), tx.object(contractId), tx.pure(newOutgoingPrice)],\n  });\n\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showEffects: true,\n    },\n  });\n  handleTransactionResponse(txRes);\n}\n","import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { getSigner, handleTransactionResponse, voteMoveCall } from \"./helpers\";\nimport type { VoteParams } from \"./types\";\n\nexport async function vote(\n  client: SuiClient,\n  { contractId, voteRequest, voterAccount, choice, packageId }: VoteParams,\n) {\n  const { keypair } = getSigner(voterAccount);\n  const tx = new TransactionBlock();\n\n  voteMoveCall({ tx, packageId, contractId, voteRequest, choice });\n\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showEffects: true,\n    },\n  });\n  handleTransactionResponse(txRes);\n  return \"success\";\n}\n","import type { SuiClient } from \"@mysten/sui.js/client\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\n\nimport { getCreatedObjects, getSigner, handleTransactionResponse } from \"./helpers\";\nimport type { VoteRequestParams } from \"./types\";\n\nexport async function createVoteRequest(\n  client: SuiClient,\n  { contractId, request, adminCapId, packageId, signerPhrase }: VoteRequestParams,\n): Promise<string> {\n  const { keypair } = getSigner(signerPhrase);\n  const tx = new TransactionBlock();\n\n  tx.moveCall({\n    target: `${packageId}::dao::start_vote`,\n    arguments: [tx.object(adminCapId), tx.pure(contractId), tx.pure(request)],\n  });\n  const txRes = await client.signAndExecuteTransactionBlock({\n    signer: keypair,\n    transactionBlock: tx,\n    requestType: \"WaitForLocalExecution\",\n    options: {\n      showObjectChanges: true,\n      showEffects: true,\n    },\n  });\n  handleTransactionResponse(txRes);\n  const vote_request_id = getCreatedObjects(txRes)?.[0].objectId;\n  if (!vote_request_id) throw new Error(\"Vote request not created\");\n  return vote_request_id;\n}\n"],"mappings":"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","names":["TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","getStringField","key","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock","TransactionBlock"]}