{"version":3,"sources":["../src/endMotion.ts","../src/getters.ts","../src/getContractStocks.ts","../src/mintContract.ts","../src/mintContractStock.ts","../src/mergeContractStock.ts","../src/splitContractStock.ts","../src/transferContractStock.ts","../src/splitTransferMerge.ts","../src/startMotion.ts","../src/toContractStock.ts","../src/vote.ts","../src/Wallet.ts","../src/sui.ts","../src/wallets.ts"],"sourcesContent":["import type { Wallet } from \"./Wallet.js\";\n\nexport type EndMotionParams = {\n  adminCapId: string;\n  motionId: string;\n};\n\nexport type EndMotionResult = {\n  digest: string;\n};\n\nexport async function endMotion(\n  executor: Wallet,\n  params: EndMotionParams,\n): Promise<EndMotionResult> {\n  const { adminCapId, motionId } = params;\n  const response = await executor.execute(async (txb, packageId) => {\n    txb.moveCall({\n      target: `${packageId}::dao::end_vote`,\n      arguments: [txb.object(adminCapId), txb.object(motionId)],\n    });\n  });\n  const { digest } = response;\n\n  return { digest };\n}\n","import type {\n  MoveStruct,\n  SuiObjectChangeCreated,\n  SuiObjectData,\n  SuiObjectResponse,\n  SuiParsedData,\n  SuiTransactionBlockResponse,\n} from \"@mysten/sui.js/client\";\n\nexport function getCreatedObjects(txRes: SuiTransactionBlockResponse): SuiObjectChangeCreated[] {\n  return (txRes.objectChanges || []).filter(\n    (change) => change.type === \"created\",\n  ) as SuiObjectChangeCreated[];\n}\n\nexport function getObjectData(response: SuiObjectResponse): SuiObjectData {\n  const { error, data } = response;\n  if (error) {\n    throw error;\n  }\n  if (!data) {\n    throw new Error(`No data: ${JSON.stringify(response)}`);\n  }\n  return data;\n}\n\nexport function getParsedData(data: SuiObjectData): SuiParsedData {\n  const { content } = data;\n  if (!content) {\n    throw new Error(`No content: ${JSON.stringify(data)}`);\n  }\n  return content;\n}\n\nexport function getType(data: SuiParsedData): string {\n  return getMoveObject(data).type;\n}\n\nexport function getStringField(data: SuiParsedData, key: string): string {\n  const { fields } = getMoveObject(data);\n  if (!fields) {\n    throw new Error(`No txn.data.content.fields: ${JSON.stringify(data)}`);\n  }\n\n  function getStringField(struct: MoveStruct, key: string): string {\n    if (Array.isArray(struct)) {\n      throw new Error(`Unexpected response.data.content.fields as array: ${JSON.stringify(data)}`);\n    }\n    if (!(key in struct)) {\n      throw new Error(`No response.data.content.fields[${key}]: ${JSON.stringify(data)}`);\n    }\n    const value = Reflect.get(struct, key);\n    if (typeof value !== \"string\") {\n      throw new Error(\n        `Unexpected type for response.data.content.fields[${key}]: ${JSON.stringify(data)}`,\n      );\n    }\n    return value;\n  }\n\n  return getStringField(fields, key);\n}\n\nfunction getMoveObject(data: SuiParsedData) {\n  const { dataType } = data;\n  if (dataType !== \"moveObject\") {\n    throw new Error(`Unexpected txn.data.content.dataType: ${JSON.stringify(data)}`);\n  }\n  return data;\n}\n\nexport function getIntField(data: SuiParsedData, key: string): number {\n  const value = getStringField(data, key);\n  return toInt(value);\n}\n\nfunction toInt(s: string) {\n  if (!s.match(/^[0-9]+$/)) {\n    throw new Error(`${s} is not a valid integer`);\n  }\n  const number = parseInt(s, 10);\n  if (isNaN(number) || !Number.isInteger(number)) {\n    throw new Error(`${s} is not a valid integer`);\n  }\n  return number;\n}\n","import type { SuiClient, SuiObjectData } from \"@mysten/sui.js/client\";\n\nimport { getObjectData, getParsedData, getStringField, getType } from \"./getters.js\";\n\nexport type GetContractStocksParams = {\n  suiClient: SuiClient;\n  owner: string;\n  contractId: string;\n  packageId: string;\n  cursor?: string;\n};\n\n/**\n * Returns all contract stocks of a contract owned by an address.\n */\nexport async function getContractStocks(\n  params: GetContractStocksParams,\n): Promise<readonly SuiObjectData[]> {\n  const { suiClient, owner, contractId, packageId, cursor } = params;\n  const type = `${packageId}::open_art_market::ContractStock`;\n  const response = await suiClient.getOwnedObjects({\n    owner,\n    options: {\n      showContent: true,\n    },\n    cursor,\n  });\n  const data = response.data.map(getObjectData).filter((object) => {\n    const parsedData = getParsedData(object);\n    return getType(parsedData) === type && getStringField(parsedData, \"contract_id\") === contractId;\n  });\n  if (response.hasNextPage && response.nextCursor) {\n    const nextData = await getContractStocks({\n      ...params,\n      cursor: response.nextCursor,\n    });\n    return [...data, ...nextData];\n  }\n\n  return data;\n}\n","import { getCreatedObjects } from \"./getters.js\";\nimport type { Currency } from \"./types.js\";\nimport type { Wallet } from \"./Wallet.js\";\n\nexport type MintContractParams = {\n  adminCapId: string;\n  totalShareCount: number;\n  sharePrice: number;\n  outgoingPrice: number;\n  name: string;\n  artist: string;\n  creationTimestampMillis: number;\n  description: string;\n  currency: Currency;\n  image: string;\n};\n\nexport type MintContractResult = {\n  contractId: string;\n  digest: string;\n};\n\nexport async function mintContract(\n  executor: Wallet,\n  params: MintContractParams,\n): Promise<MintContractResult> {\n  const {\n    adminCapId,\n    totalShareCount,\n    sharePrice,\n    outgoingPrice,\n    name,\n    artist,\n    creationTimestampMillis,\n    description,\n    currency,\n    image,\n  } = params;\n  const response = await executor.execute(async (txb, packageId) => {\n    txb.moveCall({\n      target: `${packageId}::open_art_market::mint_contract`,\n      arguments: [\n        txb.object(adminCapId),\n        txb.pure(totalShareCount),\n        txb.pure(sharePrice),\n        txb.pure(outgoingPrice),\n        txb.pure(name),\n        txb.pure(artist),\n        txb.pure(creationTimestampMillis),\n        txb.pure(description),\n        txb.pure(currency),\n        txb.pure(image),\n      ],\n    });\n  });\n  const { digest } = response;\n  const objects = getCreatedObjects(response);\n  if (objects.length !== 1) throw new Error(`Expected 1 contract, got ${JSON.stringify(objects)}`);\n  const contractId = objects[0].objectId;\n\n  return { contractId, digest };\n}\n","import { getCreatedObjects } from \"./getters.js\";\nimport type { Wallet } from \"./Wallet.js\";\n\nexport type MintContractStockParam = {\n  adminCapId: string;\n  contractId: string;\n  receiverAddress: string;\n  quantity: number;\n};\n\nexport type MintContractStockResult = {\n  contractStockIds: readonly string[];\n  digest: string;\n};\n\nexport async function mintContractStock(\n  executor: Wallet,\n  params: MintContractStockParam[],\n): Promise<MintContractStockResult> {\n  const response = await executor.execute(async (txb, packageId) => {\n    for (const { adminCapId, contractId, quantity, receiverAddress } of params) {\n      txb.moveCall({\n        target: `${packageId}::open_art_market::mint_contract_stock`,\n        arguments: [\n          txb.object(adminCapId),\n          txb.object(contractId),\n          txb.pure(quantity),\n          txb.pure(receiverAddress),\n        ],\n      });\n    }\n  });\n\n  const addressOwnedObjects = getCreatedObjects(response).filter(\n    (object) => typeof object.owner !== \"string\" && \"AddressOwner\" in object.owner,\n  );\n  const contractStockIds = addressOwnedObjects.map((object) => object.objectId);\n\n  if (contractStockIds.length !== params.length) {\n    throw new Error(\n      `Expected ${params.length} contract stock ids, got ${JSON.stringify(contractStockIds)}`,\n    );\n  }\n\n  const { digest } = response;\n  return { contractStockIds, digest };\n}\n","import type { Wallet } from \"./Wallet.js\";\n\nexport type MergeContractStockParam = {\n  toContractStockId: string;\n  fromContractStockId: string;\n};\n\nexport type MergeContractStockResult = {\n  digest: string;\n};\n\nexport async function mergeContractStock(\n  executor: Wallet,\n  params: readonly MergeContractStockParam[],\n): Promise<MergeContractStockResult> {\n  const response = await executor.execute(async (txb, packageId) => {\n    for (const { toContractStockId, fromContractStockId } of params) {\n      txb.moveCall({\n        target: `${packageId}::open_art_market::merge_contract_stocks`,\n        arguments: [txb.object(toContractStockId), txb.object(fromContractStockId)],\n      });\n    }\n  });\n\n  const { digest } = response;\n  return { digest };\n}\n","import { getCreatedObjects } from \"./getters.js\";\nimport type { Wallet } from \"./Wallet.js\";\n\nexport type SplitContractStockParams = {\n  contractStockId: string;\n  quantity: number;\n};\n\nexport type SplitContractStockResult = {\n  digest: string;\n  splitContractStockId: string;\n};\n\nexport async function splitContractStock(\n  executor: Wallet,\n  params: SplitContractStockParams,\n): Promise<SplitContractStockResult> {\n  const response = await executor.execute(async (txb, packageId) => {\n    const { contractStockId, quantity } = params;\n    txb.moveCall({\n      target: `${packageId}::open_art_market::split_contract_stock`,\n      arguments: [txb.object(contractStockId), txb.pure(quantity)],\n    });\n  });\n  const { digest } = response;\n\n  const createdObjects = getCreatedObjects(response);\n  if (createdObjects.length !== 1) {\n    throw new Error(`Expected 1 created object, got ${JSON.stringify(createdObjects)}`);\n  }\n  const createdObject = createdObjects[0];\n  const splitContractStockId = createdObject.objectId;\n\n  return { digest, splitContractStockId };\n}\n","import type { Wallet } from \"./Wallet.js\";\n\nexport type TransferContractStockParams = {\n  contractId: string;\n  contractStockId: string;\n  toAddress: string;\n};\n\nexport type TransferContractStockResult = {\n  digest: string;\n};\n\nexport async function transferContractStock(\n  executor: Wallet,\n  params: TransferContractStockParams,\n): Promise<TransferContractStockResult> {\n  const response = await executor.execute(async (txb, packageId) => {\n    const { contractId, contractStockId, toAddress } = params;\n    txb.moveCall({\n      target: `${packageId}::open_art_market::transfer_contract_stock`,\n      arguments: [txb.object(contractId), txb.pure(contractStockId), txb.pure(toAddress)],\n    });\n  });\n  const { digest } = response;\n\n  return { digest };\n}\n","import type { SuiObjectData } from \"@mysten/sui.js/client\";\n\nimport { getContractStocks } from \"./getContractStocks.js\";\nimport type { MergeContractStockParam } from \"./mergeContractStock.js\";\nimport { mergeContractStock } from \"./mergeContractStock.js\";\nimport { splitContractStock } from \"./splitContractStock.js\";\nimport { transferContractStock } from \"./transferContractStock.js\";\nimport type { Wallet } from \"./Wallet.js\";\n\nexport type SplitMergeTransferParams = {\n  packageId: string;\n  fromExecutor: Wallet;\n  toExecutor: Wallet;\n  contractId: string;\n  fromAddress: string;\n  toAddress: string;\n  quantity: number;\n};\n\nexport type SplitMergeTransferResult = {\n  digest: string;\n  fromContractStockId: string;\n  toContractStockId: string;\n};\n\n/**\n * Transfers a quantity of contract stock from one address to another.\n * Takes care of splitting and merging so that aftet the transfer,\n * both addresses have a single stock.\n */\nexport async function splitTransferMerge({\n  packageId,\n  fromExecutor,\n  toExecutor,\n  contractId,\n  fromAddress,\n  toAddress,\n  quantity,\n}: SplitMergeTransferParams): Promise<SplitMergeTransferResult> {\n  const fromContractStocks = await getContractStocks({\n    suiClient: fromExecutor.suiClient,\n    owner: fromAddress,\n    contractId,\n    packageId,\n  });\n  for (const { fromContractStockId, toContractStockId } of makeMergeContractStockParams(\n    fromContractStocks,\n  )) {\n    await mergeContractStock(fromExecutor, [{ fromContractStockId, toContractStockId }]);\n  }\n  const { splitContractStockId } = await splitContractStock(fromExecutor, {\n    contractStockId: fromContractStocks[0].objectId,\n    quantity,\n  });\n  const { digest } = await transferContractStock(fromExecutor, {\n    contractId,\n    contractStockId: splitContractStockId,\n    toAddress,\n  });\n\n  const toContractStocks = await getContractStocks({\n    suiClient: toExecutor.suiClient,\n    owner: toAddress,\n    contractId,\n    packageId,\n  });\n  for (const { fromContractStockId, toContractStockId } of makeMergeContractStockParams(\n    toContractStocks,\n  )) {\n    await mergeContractStock(toExecutor, [{ fromContractStockId, toContractStockId }]);\n  }\n  return {\n    digest,\n    fromContractStockId: fromContractStocks[0].objectId,\n    toContractStockId: toContractStocks[0].objectId,\n  };\n}\n\nfunction makeMergeContractStockParams(\n  contractStocks: readonly SuiObjectData[],\n): readonly MergeContractStockParam[] {\n  const stocksToMerge = contractStocks.slice(1);\n  return stocksToMerge.map((stock) => ({\n    fromContractStockId: stock.objectId,\n    toContractStockId: contractStocks[0].objectId,\n  }));\n}\n","import { getCreatedObjects } from \"./getters.js\";\nimport type { Wallet } from \"./Wallet.js\";\n\nexport type StartMotionParams = {\n  adminCapId: string;\n  contractId: string;\n  /**\n   * The motion to vote on\n   */\n  motion: string;\n};\n\nexport type StartMotionResult = {\n  digest: string;\n  motionId: string;\n};\n\nexport async function startMotion(\n  executor: Wallet,\n  params: StartMotionParams,\n): Promise<StartMotionResult> {\n  const { adminCapId, contractId, motion } = params;\n  const response = await executor.execute(async (txb, packageId) => {\n    txb.moveCall({\n      target: `${packageId}::dao::start_vote`,\n      arguments: [txb.object(adminCapId), txb.pure(contractId), txb.pure(motion)],\n    });\n  });\n  const { digest } = response;\n\n  const createdObjects = getCreatedObjects(response);\n  if (createdObjects.length !== 1) {\n    throw new Error(`Expected 1 created object, got ${JSON.stringify(createdObjects)}`);\n  }\n  const createdObject = createdObjects[0];\n  const motionId = createdObject.objectId;\n\n  return { digest, motionId };\n}\n","import type { SuiObjectData } from \"@mysten/sui.js/client\";\n\nimport { getIntField, getParsedData, getStringField } from \"./getters.js\";\n\nexport type ContractStock = {\n  contractStockId: string;\n  digest: string;\n  contractId: string;\n  quantity: number;\n  productId: string;\n};\n\nexport function toContractStock(objectData: SuiObjectData): ContractStock {\n  const parsedData = getParsedData(objectData);\n\n  return {\n    contractStockId: objectData.objectId,\n    digest: objectData.digest,\n    contractId: getStringField(parsedData, \"contract_id\"),\n    quantity: getIntField(parsedData, \"shares\"),\n    productId: getStringField(parsedData, \"reference\"),\n  };\n}\n","import type { Wallet } from \"./Wallet.js\";\n\nexport type VoteParams = {\n  contractId: string;\n  motionId: string;\n  choice: boolean;\n};\n\nexport type VoteResult = {\n  digest: string;\n};\n\nexport async function vote(executor: Wallet, params: VoteParams): Promise<VoteResult> {\n  const { contractId, motionId, choice } = params;\n  const response = await executor.execute(async (txb, packageId) => {\n    txb.moveCall({\n      target: `${packageId}::dao::vote`,\n      arguments: [txb.object(contractId), txb.object(motionId), txb.pure(choice)],\n    });\n  });\n  const { digest } = response;\n  return { digest };\n}\n","import type { SuiTransactionBlockResponse } from \"@mysten/sui.js/client\";\nimport { getFullnodeUrl, SuiClient } from \"@mysten/sui.js/client\";\nimport { Ed25519Keypair } from \"@mysten/sui.js/keypairs/ed25519\";\nimport type { TransactionBlock } from \"@mysten/sui.js/transactions\";\nimport { GasStationClient, KeyClient, ShinamiWalletSigner, WalletClient } from \"@shinami/clients\";\n\nimport type { SuiAddress } from \"./sui.js\";\nimport { newSuiAddress } from \"./sui.js\";\nimport type { NetworkName } from \"./types.js\";\nimport { ShinamiWallet, SuiWallet } from \"./wallets.js\";\n\nexport interface Wallet {\n  readonly address: string;\n  readonly suiClient: SuiClient;\n  execute(build: BuildTransactionBlock): Promise<SuiTransactionBlockResponse>;\n}\n\nexport type BuildTransactionBlock = (txb: TransactionBlock, packageId: string) => Promise<void>;\n\nexport type NewWalletParams = NewSuiWalletParams | NewShinamiWalletParams;\n\nexport type NewSuiWalletParams = {\n  type: \"sui\";\n  network: NetworkName;\n  packageId: string;\n  suiAddress?: SuiAddress;\n};\n\nexport type NewShinamiWalletParams = {\n  type: \"shinami\";\n  network: NetworkName;\n  packageId: string;\n  shinamiAccessKey: string;\n  walletId: string;\n  walletSecret: string;\n  address?: string;\n};\n\nexport async function newWallet(params: NewWalletParams): Promise<Wallet> {\n  switch (params.type) {\n    case \"sui\": {\n      const { network, packageId } = params;\n      const url = getFullnodeUrl(network);\n      const suiClient = new SuiClient({ url });\n\n      let { suiAddress } = params;\n      if (!suiAddress) {\n        suiAddress = await newSuiAddress();\n      }\n\n      const { address, phrase } = suiAddress;\n      const keypair = Ed25519Keypair.deriveKeypair(phrase);\n      return new SuiWallet({\n        address,\n        packageId,\n        suiClient,\n        keypair,\n      });\n    }\n    case \"shinami\": {\n      const { packageId, network, shinamiAccessKey, walletId, walletSecret } = params;\n      const url = getFullnodeUrl(network);\n      const suiClient = new SuiClient({ url });\n      const gasClient = new GasStationClient(shinamiAccessKey);\n      const walletClient = new WalletClient(shinamiAccessKey);\n      const keyClient = new KeyClient(shinamiAccessKey);\n\n      const signer = new ShinamiWalletSigner(walletId, walletClient, walletSecret, keyClient);\n\n      let { address } = params;\n      if (!address) {\n        const sessionToken = await keyClient.createSession(walletSecret);\n        address = await walletClient.createWallet(walletId, sessionToken);\n      }\n\n      return new ShinamiWallet({\n        suiClient,\n        gasClient,\n        packageId,\n        address: address,\n        signer,\n      });\n    }\n  }\n}\n","import { exec } from \"node:child_process\";\n\ntype Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[];\n\nasync function getSuiCoinObjectId(): Promise<string> {\n  const gas = await execSui<{ id: { id: string } }[]>(\"sui client gas --json\");\n  return gas[0].id.id;\n}\n\nexport type SuiAddress = {\n  readonly address: string;\n  readonly phrase: string;\n};\n\n/**\n * Creates a new address and transfers balance to it.\n */\nexport async function newSuiAddress(balance = 20_000_000_000): Promise<SuiAddress> {\n  const [address, phrase] = await execSui<[string, string, string]>(\n    \"sui client new-address ed25519 --json\",\n  );\n  const suiCoinObjectId = await getSuiCoinObjectId();\n  await transferSui({ to: address, suiCoinObjectId, amount: balance });\n  return { address, phrase };\n}\n\ntype TransferSuiParams = {\n  to: string;\n  suiCoinObjectId: string;\n  amount: number;\n  gasBudget?: number;\n};\n\nasync function transferSui({\n  to,\n  suiCoinObjectId,\n  amount,\n  gasBudget = 200_000_000,\n}: TransferSuiParams) {\n  await execSui(\n    `sui client transfer-sui --amount ${amount} --to \"${to}\" --gas-budget ${gasBudget} --sui-coin-object-id \"${suiCoinObjectId}\" --json`,\n  );\n}\n\nasync function execSui<T extends Json>(command: string): Promise<T> {\n  return new Promise((resolve, reject) => {\n    exec(command, (err, stdout, stderr) => {\n      if (err) return reject(err);\n      if (stderr) return reject(new Error(stderr));\n      try {\n        resolve(JSON.parse(stdout) as T);\n      } catch (err) {\n        reject(`Didn't get JSON output from sui: ${stdout}`);\n      }\n    });\n  });\n}\n","import { fromB64 } from \"@mysten/bcs\";\nimport type { SuiClient, SuiTransactionBlockResponse } from \"@mysten/sui.js/client\";\nimport type { Keypair } from \"@mysten/sui.js/cryptography\";\nimport { TransactionBlock } from \"@mysten/sui.js/transactions\";\nimport type { GasStationClient, ShinamiWalletSigner } from \"@shinami/clients\";\nimport { buildGaslessTransactionBytes } from \"@shinami/clients\";\n\nimport type { BuildTransactionBlock, Wallet } from \"./Wallet.js\";\n\nexport type SuiWalletParams = {\n  address: string;\n  suiClient: SuiClient;\n  packageId: string;\n  keypair: Keypair;\n};\n\nexport class SuiWallet implements Wallet {\n  constructor(private readonly params: SuiWalletParams) {}\n\n  get address(): string {\n    throw new Error(\"Not implemented\");\n  }\n\n  get suiClient(): SuiClient {\n    return this.params.suiClient;\n  }\n\n  async execute(build: BuildTransactionBlock): Promise<SuiTransactionBlockResponse> {\n    const txb = new TransactionBlock();\n    const { suiClient, packageId, keypair } = this.params;\n    await build(txb, packageId);\n\n    const response = await suiClient.signAndExecuteTransactionBlock({\n      signer: keypair,\n      transactionBlock: txb,\n      requestType: \"WaitForLocalExecution\",\n      options: {\n        showObjectChanges: true,\n        showEffects: true,\n      },\n    });\n\n    return checkResponse(response);\n  }\n}\n\nexport type ShinamiWalletParams = {\n  suiClient: SuiClient;\n  gasClient: GasStationClient;\n  packageId: string;\n  address: string;\n  signer: ShinamiWalletSigner;\n};\n\nconst SUI_GAS_FEE_LIMIT = 5_000_000;\n\nexport class ShinamiWallet implements Wallet {\n  constructor(private readonly params: ShinamiWalletParams) {}\n\n  get suiClient(): SuiClient {\n    return this.params.suiClient;\n  }\n\n  get address(): string {\n    return this.params.address;\n  }\n\n  async execute(build: BuildTransactionBlock): Promise<SuiTransactionBlockResponse> {\n    const { suiClient, gasClient, packageId, address, signer } = this.params;\n    const gaslessTx = await buildGaslessTransactionBytes({\n      sui: suiClient,\n      build: (txb) => build(txb, packageId),\n    });\n\n    const { txBytes, signature: gasSignature } = await gasClient.sponsorTransactionBlock(\n      gaslessTx,\n      address,\n      SUI_GAS_FEE_LIMIT,\n    );\n\n    // Sign the sponsored tx.\n    const { signature } = await signer.signTransactionBlock(fromB64(txBytes));\n\n    const signatures = [signature, gasSignature];\n    // Execute the sponsored & signed tx.\n    const response = await suiClient.executeTransactionBlock({\n      transactionBlock: txBytes,\n      signature: signatures,\n      requestType: \"WaitForLocalExecution\",\n      options: {\n        showObjectChanges: true,\n        showEffects: true,\n      },\n    });\n    return checkResponse(response);\n  }\n}\n\nfunction checkResponse(response: SuiTransactionBlockResponse): SuiTransactionBlockResponse {\n  const { effects } = response;\n  if (!effects) {\n    throw new Error(\"Failed to get execution effects\");\n  }\n  const { status } = effects;\n  if (status.error) {\n    throw new Error(status.error);\n  }\n  if (status.status !== \"success\") {\n    throw new Error(`Transaction failed with status: ${status}`);\n  }\n  return response;\n}\n"],"mappings":"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","names":["getStringField","key","err"]}