"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const artwork_1 = require("../src/artwork");
const artwork_shard_1 = require("../src/artwork_shard");
const config_1 = require("../src/config");
const end_request_voting_1 = require("../src/end_request_voting");
const split_artwork_shard_1 = require("../src/split_artwork_shard");
const vote_1 = require("../src/vote");
const vote_request_1 = require("../src/vote_request");
// WIP for start to end scenario
async function startToEndScenario() {
    // Admin mints an artwork
    const artworkId = await (0, artwork_1.mintArtwork)({
        signerPhrase: config_1.ADMIN_PHRASE,
        packageId: config_1.PACKAGE_ID,
        adminCapId: config_1.ADMIN_CAP_ID,
        totalSupply: 1000,
        sharePrice: 10,
        multiplier: 2,
        name: "Mona Lisa",
        artist: "Leonardo da Vinci",
        creationDate: "1685548680595",
        description: "Choconta painting",
        currency: "NOK",
        image: "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/800px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg"
    });
    // Admin creates an artwork shard and sends to user
    const { artworkShardId } = await (0, artwork_shard_1.mintArtworkShard)({ artworkId, signerPhrase: config_1.ADMIN_PHRASE, recieverPhrase: config_1.USER1_PHRASE, shares: 10, packageId: config_1.PACKAGE_ID, adminCapId: config_1.ADMIN_CAP_ID, });
    // Split artwork shard
    await (0, split_artwork_shard_1.splitArtworkShard)({ artworkShardId, signerPhrase: config_1.USER1_PHRASE, shares: 2, packageId: config_1.PACKAGE_ID });
    // Admin reates a vote request for the artwork
    const voteRequest = await (0, vote_request_1.createVoteRequest)({ artwork_id: artworkId, request: "Request to sell artwork to Bob", adminCapId: config_1.ADMIN_CAP_ID, packageId: config_1.PACKAGE_ID, signerPhrase: config_1.ADMIN_PHRASE });
    if (!voteRequest)
        throw new Error("Could not create vote request");
    // User votes for vote request
    await (0, vote_1.vote)({ artwork: artworkId, voteRequest, voterAccount: config_1.USER1_PHRASE, choice: true });
    // End voting for vote request
    await (0, end_request_voting_1.endRequestVoting)({ voteRequest, signerPhrase: config_1.ADMIN_PHRASE, adminCapId: config_1.ADMIN_CAP_ID, packageId: config_1.PACKAGE_ID });
}
startToEndScenario();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnRfdG9fZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdF9zY2VuYXJpb3Mvc3RhcnRfdG9fZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNENBQTZDO0FBQzdDLHdEQUF3RDtBQUN4RCwwQ0FBcUY7QUFDckYsa0VBQTZEO0FBQzdELG9FQUErRDtBQUMvRCxzQ0FBbUM7QUFDbkMsc0RBQXdEO0FBRXhELGdDQUFnQztBQUNoQyxLQUFLLFVBQVUsa0JBQWtCO0lBQy9CLHlCQUF5QjtJQUN6QixNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUEscUJBQVcsRUFBQztRQUNsQyxZQUFZLEVBQUUscUJBQVk7UUFDMUIsU0FBUyxFQUFFLG1CQUFVO1FBQ3JCLFVBQVUsRUFBRSxxQkFBWTtRQUN4QixXQUFXLEVBQUUsSUFBSTtRQUNqQixVQUFVLEVBQUUsRUFBRTtRQUNkLFVBQVUsRUFBRSxDQUFDO1FBQ2IsSUFBSSxFQUFFLFdBQVc7UUFDakIsTUFBTSxFQUFFLG1CQUFtQjtRQUMzQixZQUFZLEVBQUUsZUFBZTtRQUM3QixXQUFXLEVBQUUsbUJBQW1CO1FBQ2hDLFFBQVEsRUFBRSxLQUFLO1FBQ2YsS0FBSyxFQUFFLDZMQUE2TDtLQUNyTSxDQUFDLENBQUM7SUFFSCxtREFBbUQ7SUFDbkQsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sSUFBQSxnQ0FBZ0IsRUFBQyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUscUJBQVksRUFBRSxjQUFjLEVBQUUscUJBQVksRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxtQkFBVSxFQUFFLFVBQVUsRUFBRSxxQkFBWSxHQUFFLENBQUMsQ0FBQztJQUV2TCxzQkFBc0I7SUFDdEIsTUFBTSxJQUFBLHVDQUFpQixFQUFDLEVBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxxQkFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLG1CQUFVLEVBQUMsQ0FBQyxDQUFDO0lBRXhHLDhDQUE4QztJQUM5QyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUEsZ0NBQWlCLEVBQ3pDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsVUFBVSxFQUFFLHFCQUFZLEVBQUUsU0FBUyxFQUFFLG1CQUFVLEVBQUUsWUFBWSxFQUFFLHFCQUFZLEVBQUUsQ0FBRyxDQUFDO0lBQ3ZKLElBQUksQ0FBQyxXQUFXO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBRW5FLDhCQUE4QjtJQUM5QixNQUFNLElBQUEsV0FBSSxFQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLHFCQUFZLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFMUYsOEJBQThCO0lBQzlCLE1BQU0sSUFBQSxxQ0FBZ0IsRUFBQyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUscUJBQVksRUFBRSxVQUFVLEVBQUUscUJBQVksRUFBRSxTQUFTLEVBQUUsbUJBQVUsRUFBRSxDQUFDLENBQUM7QUFDdkgsQ0FBQztBQUVELGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtaW50QXJ0d29yayB9IGZyb20gXCIuLi9zcmMvYXJ0d29ya1wiO1xuaW1wb3J0IHsgbWludEFydHdvcmtTaGFyZCB9IGZyb20gXCIuLi9zcmMvYXJ0d29ya19zaGFyZFwiO1xuaW1wb3J0IHsgQURNSU5fQ0FQX0lELCBBRE1JTl9QSFJBU0UsIFBBQ0tBR0VfSUQsIFVTRVIxX1BIUkFTRSB9IGZyb20gXCIuLi9zcmMvY29uZmlnXCI7XG5pbXBvcnQgeyBlbmRSZXF1ZXN0Vm90aW5nIH0gZnJvbSBcIi4uL3NyYy9lbmRfcmVxdWVzdF92b3RpbmdcIjtcbmltcG9ydCB7IHNwbGl0QXJ0d29ya1NoYXJkIH0gZnJvbSBcIi4uL3NyYy9zcGxpdF9hcnR3b3JrX3NoYXJkXCI7XG5pbXBvcnQgeyB2b3RlIH0gZnJvbSBcIi4uL3NyYy92b3RlXCI7XG5pbXBvcnQgeyBjcmVhdGVWb3RlUmVxdWVzdCB9IGZyb20gXCIuLi9zcmMvdm90ZV9yZXF1ZXN0XCI7XG5cbi8vIFdJUCBmb3Igc3RhcnQgdG8gZW5kIHNjZW5hcmlvXG5hc3luYyBmdW5jdGlvbiBzdGFydFRvRW5kU2NlbmFyaW8oKSB7XG4gIC8vIEFkbWluIG1pbnRzIGFuIGFydHdvcmtcbiAgY29uc3QgYXJ0d29ya0lkID0gYXdhaXQgbWludEFydHdvcmsoe1xuICAgIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLFxuICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgdG90YWxTdXBwbHk6IDEwMDAsXG4gICAgc2hhcmVQcmljZTogMTAsXG4gICAgbXVsdGlwbGllcjogMixcbiAgICBuYW1lOiBcIk1vbmEgTGlzYVwiLFxuICAgIGFydGlzdDogXCJMZW9uYXJkbyBkYSBWaW5jaVwiLFxuICAgIGNyZWF0aW9uRGF0ZTogXCIxNjg1NTQ4NjgwNTk1XCIsXG4gICAgZGVzY3JpcHRpb246IFwiQ2hvY29udGEgcGFpbnRpbmdcIixcbiAgICBjdXJyZW5jeTogXCJOT0tcIixcbiAgICBpbWFnZTogXCJodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zL3RodW1iL2UvZWMvTW9uYV9MaXNhJTJDX2J5X0xlb25hcmRvX2RhX1ZpbmNpJTJDX2Zyb21fQzJSTUZfcmV0b3VjaGVkLmpwZy84MDBweC1Nb25hX0xpc2ElMkNfYnlfTGVvbmFyZG9fZGFfVmluY2klMkNfZnJvbV9DMlJNRl9yZXRvdWNoZWQuanBnXCJcbiAgfSk7XG5cbiAgLy8gQWRtaW4gY3JlYXRlcyBhbiBhcnR3b3JrIHNoYXJkIGFuZCBzZW5kcyB0byB1c2VyXG4gIGNvbnN0IHsgYXJ0d29ya1NoYXJkSWQgfSA9IGF3YWl0IG1pbnRBcnR3b3JrU2hhcmQoe2FydHdvcmtJZCwgc2lnbmVyUGhyYXNlOiBBRE1JTl9QSFJBU0UsIHJlY2lldmVyUGhyYXNlOiBVU0VSMV9QSFJBU0UsIHNoYXJlczogMTAsIHBhY2thZ2VJZDogUEFDS0FHRV9JRCwgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELH0pO1xuXG4gIC8vIFNwbGl0IGFydHdvcmsgc2hhcmRcbiAgYXdhaXQgc3BsaXRBcnR3b3JrU2hhcmQoe2FydHdvcmtTaGFyZElkLCBzaWduZXJQaHJhc2U6IFVTRVIxX1BIUkFTRSwgc2hhcmVzOiAyLCBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUR9KTtcbiAgXG4gIC8vIEFkbWluIHJlYXRlcyBhIHZvdGUgcmVxdWVzdCBmb3IgdGhlIGFydHdvcmtcbiAgY29uc3Qgdm90ZVJlcXVlc3QgPSBhd2FpdCBjcmVhdGVWb3RlUmVxdWVzdChcbiAgICB7IGFydHdvcmtfaWQ6IGFydHdvcmtJZCwgcmVxdWVzdDogXCJSZXF1ZXN0IHRvIHNlbGwgYXJ0d29yayB0byBCb2JcIiwgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELCBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFIH0gICk7XG4gIGlmICghdm90ZVJlcXVlc3QpIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBjcmVhdGUgdm90ZSByZXF1ZXN0XCIpO1xuXG4gIC8vIFVzZXIgdm90ZXMgZm9yIHZvdGUgcmVxdWVzdFxuICBhd2FpdCB2b3RlKHsgYXJ0d29yazogYXJ0d29ya0lkLCB2b3RlUmVxdWVzdCwgdm90ZXJBY2NvdW50OiBVU0VSMV9QSFJBU0UsIGNob2ljZTogdHJ1ZSB9KTtcblxuICAvLyBFbmQgdm90aW5nIGZvciB2b3RlIHJlcXVlc3RcbiAgYXdhaXQgZW5kUmVxdWVzdFZvdGluZyh7IHZvdGVSZXF1ZXN0LCBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSwgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELCBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQgfSk7XG59XG5cbnN0YXJ0VG9FbmRTY2VuYXJpbygpO1xuIl19