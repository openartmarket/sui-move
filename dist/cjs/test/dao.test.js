"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const artwork_1 = require("../src/artwork");
const artwork_shard_1 = require("../src/artwork_shard");
const config_1 = require("../src/config");
const end_request_voting_1 = require("../src/end_request_voting");
const vote_1 = require("../src/vote");
const vote_request_1 = require("../src/vote_request");
const artworkOptions = {
    signerPhrase: config_1.ADMIN_PHRASE,
    packageId: config_1.PACKAGE_ID,
    adminCapId: config_1.ADMIN_CAP_ID,
    totalSupply: 500,
    sharePrice: 10,
    multiplier: 100,
    name: "Mona Lisa",
    artist: "Leonardo da Vinci",
    creationDate: "1685548680595",
    description: "Choconta painting",
    currency: "NOK",
    image: "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/800px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg",
};
describe("DAO Voting structure", () => {
    let artworkId;
    beforeEach(async () => {
        artworkId = await (0, artwork_1.mintArtwork)(artworkOptions);
        await (0, artwork_shard_1.mintArtworkShard)({
            artworkId,
            signerPhrase: config_1.ADMIN_PHRASE,
            recieverPhrase: config_1.ADMIN_PHRASE,
            shares: 151,
            packageId: config_1.PACKAGE_ID,
            adminCapId: config_1.ADMIN_CAP_ID,
        });
        await (0, artwork_shard_1.mintArtworkShard)({
            artworkId,
            signerPhrase: config_1.ADMIN_PHRASE,
            recieverPhrase: config_1.USER1_PHRASE,
            shares: 249,
            packageId: config_1.PACKAGE_ID,
            adminCapId: config_1.ADMIN_CAP_ID,
        });
        await (0, artwork_shard_1.mintArtworkShard)({
            artworkId,
            signerPhrase: config_1.ADMIN_PHRASE,
            recieverPhrase: config_1.USER2_PHRASE,
            shares: 100,
            packageId: config_1.PACKAGE_ID,
            adminCapId: config_1.ADMIN_CAP_ID,
        });
    });
    it("can start a voting session", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({ artwork_id: artworkId, request: "Request to sell artwork to Museum", packageId: config_1.PACKAGE_ID, signerPhrase: config_1.ADMIN_PHRASE, adminCapId: config_1.ADMIN_CAP_ID });
        assert_1.default.ok(voteRequest);
    });
    it("can vote as a shareholder", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({ artwork_id: artworkId, request: "Request to sell artwork to Museum", packageId: config_1.PACKAGE_ID, signerPhrase: config_1.ADMIN_PHRASE, adminCapId: config_1.ADMIN_CAP_ID });
        assert_1.default.ok(voteRequest);
        const userVote = await (0, vote_1.vote)({ artwork: artworkId, voteRequest, voterAccount: config_1.USER1_PHRASE, choice: true });
        assert_1.default.ok(userVote);
    });
    it("cannot double vote as a shareholder", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({ artwork_id: artworkId, request: "Request to sell artwork to Museum", packageId: config_1.PACKAGE_ID, signerPhrase: config_1.ADMIN_PHRASE, adminCapId: config_1.ADMIN_CAP_ID });
        assert_1.default.ok(voteRequest);
        const userVote = await (0, vote_1.vote)({ artwork: artworkId, voteRequest, voterAccount: config_1.USER1_PHRASE, choice: true });
        assert_1.default.ok(userVote);
        await assert_1.default.rejects((0, vote_1.vote)({ artwork: artworkId, voteRequest, voterAccount: config_1.USER1_PHRASE, choice: true }));
    });
    it("cannot vote if not a shareholder", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({ artwork_id: artworkId, request: "Request to sell artwork to Museum", packageId: config_1.PACKAGE_ID, signerPhrase: config_1.ADMIN_PHRASE, adminCapId: config_1.ADMIN_CAP_ID });
        assert_1.default.ok(voteRequest);
        await assert_1.default.rejects((0, vote_1.vote)({ artwork: artworkId, voteRequest, voterAccount: config_1.USER3_PHRASE, choice: true }));
    });
    it("cannot vote if vote is closed", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({ artwork_id: artworkId, request: "Request to sell artwork to Museum", packageId: config_1.PACKAGE_ID, signerPhrase: config_1.ADMIN_PHRASE, adminCapId: config_1.ADMIN_CAP_ID });
        assert_1.default.ok(voteRequest);
        const userVote = await (0, vote_1.vote)({ artwork: artworkId, voteRequest, voterAccount: config_1.USER1_PHRASE, choice: true });
        assert_1.default.ok(userVote);
        const endVoteRequest = await (0, end_request_voting_1.endRequestVoting)({ voteRequest, packageId: config_1.PACKAGE_ID, signerPhrase: config_1.ADMIN_PHRASE, adminCapId: config_1.ADMIN_CAP_ID });
        assert_1.default.ok(endVoteRequest);
        await assert_1.default.rejects((0, vote_1.vote)({ artwork: artworkId, voteRequest, voterAccount: config_1.USER1_PHRASE, choice: true }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFvLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L2Rhby50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0RBQTRCO0FBRTVCLDRDQUF1RDtBQUN2RCx3REFBd0Q7QUFDeEQsMENBT3VCO0FBQ3ZCLGtFQUE2RDtBQUM3RCxzQ0FBbUM7QUFDbkMsc0RBQXdEO0FBRXhELE1BQU0sY0FBYyxHQUFHO0lBQ3JCLFlBQVksRUFBRSxxQkFBWTtJQUMxQixTQUFTLEVBQUUsbUJBQVU7SUFDckIsVUFBVSxFQUFFLHFCQUFZO0lBQ3hCLFdBQVcsRUFBRSxHQUFHO0lBQ2hCLFVBQVUsRUFBRSxFQUFFO0lBQ2QsVUFBVSxFQUFFLEdBQUc7SUFDZixJQUFJLEVBQUUsV0FBVztJQUNqQixNQUFNLEVBQUUsbUJBQW1CO0lBQzNCLFlBQVksRUFBRSxlQUFlO0lBQzdCLFdBQVcsRUFBRSxtQkFBbUI7SUFDaEMsUUFBUSxFQUFFLEtBQWlCO0lBQzNCLEtBQUssRUFDSCw2TEFBNkw7Q0FDaE0sQ0FBQztBQUVGLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsSUFBSSxTQUFpQixDQUFDO0lBQ3RCLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixTQUFTLEdBQUcsTUFBTSxJQUFBLHFCQUFXLEVBQUMsY0FBYyxDQUFDLENBQUM7UUFDOUMsTUFBTSxJQUFBLGdDQUFnQixFQUFDO1lBQ3JCLFNBQVM7WUFDVCxZQUFZLEVBQUUscUJBQVk7WUFDMUIsY0FBYyxFQUFFLHFCQUFZO1lBQzVCLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLG1CQUFVO1lBQ3JCLFVBQVUsRUFBRSxxQkFBWTtTQUN6QixDQUFDLENBQUM7UUFDSCxNQUFNLElBQUEsZ0NBQWdCLEVBQUM7WUFDckIsU0FBUztZQUNULFlBQVksRUFBRSxxQkFBWTtZQUMxQixjQUFjLEVBQUUscUJBQVk7WUFDNUIsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsbUJBQVU7WUFDckIsVUFBVSxFQUFFLHFCQUFZO1NBQ3pCLENBQUMsQ0FBQztRQUNILE1BQU0sSUFBQSxnQ0FBZ0IsRUFBQztZQUNyQixTQUFTO1lBQ1QsWUFBWSxFQUFFLHFCQUFZO1lBQzFCLGNBQWMsRUFBRSxxQkFBWTtZQUM1QixNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxtQkFBVTtZQUNyQixVQUFVLEVBQUUscUJBQVk7U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDMUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFBLGdDQUFpQixFQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsU0FBUyxFQUFFLG1CQUFVLEVBQUUsWUFBWSxFQUFFLHFCQUFZLEVBQUUsVUFBVSxFQUFFLHFCQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ2xNLGdCQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBQSxnQ0FBaUIsRUFBQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLFNBQVMsRUFBRSxtQkFBVSxFQUFFLFlBQVksRUFBRSxxQkFBWSxFQUFFLFVBQVUsRUFBRSxxQkFBWSxFQUFFLENBQUMsQ0FBQztRQUNsTSxnQkFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2QixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUEsV0FBSSxFQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLHFCQUFZLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0csZ0JBQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkQsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFBLGdDQUFpQixFQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsU0FBUyxFQUFFLG1CQUFVLEVBQUUsWUFBWSxFQUFFLHFCQUFZLEVBQUUsVUFBVSxFQUFFLHFCQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ2xNLGdCQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBQSxXQUFJLEVBQUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUscUJBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMzRyxnQkFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwQixNQUFNLGdCQUFNLENBQUMsT0FBTyxDQUFDLElBQUEsV0FBSSxFQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLHFCQUFZLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1RyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoRCxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUEsZ0NBQWlCLEVBQUMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxTQUFTLEVBQUUsbUJBQVUsRUFBRSxZQUFZLEVBQUUscUJBQVksRUFBRSxVQUFVLEVBQUUscUJBQVksRUFBRSxDQUFDLENBQUM7UUFDbE0sZ0JBQU0sQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkIsTUFBTSxnQkFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFBLFdBQUksRUFBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxxQkFBWSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUcsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDN0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFBLGdDQUFpQixFQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsU0FBUyxFQUFFLG1CQUFVLEVBQUUsWUFBWSxFQUFFLHFCQUFZLEVBQUUsVUFBVSxFQUFFLHFCQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ2xNLGdCQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBQSxXQUFJLEVBQUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUscUJBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMzRyxnQkFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwQixNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUEscUNBQWdCLEVBQUMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLG1CQUFVLEVBQUUsWUFBWSxFQUFFLHFCQUFZLEVBQUUsVUFBVSxFQUFFLHFCQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzVJLGdCQUFNLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sZ0JBQU0sQ0FBQyxPQUFPLENBQUMsSUFBQSxXQUFJLEVBQUMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUscUJBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVHLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuaW1wb3J0IHsgQ3VycmVuY3ksIG1pbnRBcnR3b3JrIH0gZnJvbSBcIi4uL3NyYy9hcnR3b3JrXCI7XG5pbXBvcnQgeyBtaW50QXJ0d29ya1NoYXJkIH0gZnJvbSBcIi4uL3NyYy9hcnR3b3JrX3NoYXJkXCI7XG5pbXBvcnQge1xuICBBRE1JTl9DQVBfSUQsXG4gIEFETUlOX1BIUkFTRSxcbiAgUEFDS0FHRV9JRCxcbiAgVVNFUjFfUEhSQVNFLFxuICBVU0VSMl9QSFJBU0UsXG4gIFVTRVIzX1BIUkFTRSxcbn0gZnJvbSBcIi4uL3NyYy9jb25maWdcIjtcbmltcG9ydCB7IGVuZFJlcXVlc3RWb3RpbmcgfSBmcm9tIFwiLi4vc3JjL2VuZF9yZXF1ZXN0X3ZvdGluZ1wiO1xuaW1wb3J0IHsgdm90ZSB9IGZyb20gXCIuLi9zcmMvdm90ZVwiO1xuaW1wb3J0IHsgY3JlYXRlVm90ZVJlcXVlc3QgfSBmcm9tIFwiLi4vc3JjL3ZvdGVfcmVxdWVzdFwiO1xuXG5jb25zdCBhcnR3b3JrT3B0aW9ucyA9IHtcbiAgc2lnbmVyUGhyYXNlOiBBRE1JTl9QSFJBU0UsXG4gIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELFxuICB0b3RhbFN1cHBseTogNTAwLFxuICBzaGFyZVByaWNlOiAxMCxcbiAgbXVsdGlwbGllcjogMTAwLFxuICBuYW1lOiBcIk1vbmEgTGlzYVwiLFxuICBhcnRpc3Q6IFwiTGVvbmFyZG8gZGEgVmluY2lcIixcbiAgY3JlYXRpb25EYXRlOiBcIjE2ODU1NDg2ODA1OTVcIixcbiAgZGVzY3JpcHRpb246IFwiQ2hvY29udGEgcGFpbnRpbmdcIixcbiAgY3VycmVuY3k6IFwiTk9LXCIgYXMgQ3VycmVuY3ksXG4gIGltYWdlOlxuICAgIFwiaHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi9lL2VjL01vbmFfTGlzYSUyQ19ieV9MZW9uYXJkb19kYV9WaW5jaSUyQ19mcm9tX0MyUk1GX3JldG91Y2hlZC5qcGcvODAwcHgtTW9uYV9MaXNhJTJDX2J5X0xlb25hcmRvX2RhX1ZpbmNpJTJDX2Zyb21fQzJSTUZfcmV0b3VjaGVkLmpwZ1wiLFxufTtcblxuZGVzY3JpYmUoXCJEQU8gVm90aW5nIHN0cnVjdHVyZVwiLCAoKSA9PiB7XG4gIGxldCBhcnR3b3JrSWQ6IHN0cmluZztcbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgYXJ0d29ya0lkID0gYXdhaXQgbWludEFydHdvcmsoYXJ0d29ya09wdGlvbnMpO1xuICAgIGF3YWl0IG1pbnRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya0lkLFxuICAgICAgc2lnbmVyUGhyYXNlOiBBRE1JTl9QSFJBU0UsXG4gICAgICByZWNpZXZlclBocmFzZTogQURNSU5fUEhSQVNFLFxuICAgICAgc2hhcmVzOiAxNTEsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG4gICAgYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2lldmVyUGhyYXNlOiBVU0VSMV9QSFJBU0UsXG4gICAgICBzaGFyZXM6IDI0OSxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICAgIGFkbWluQ2FwSWQ6IEFETUlOX0NBUF9JRCxcbiAgICB9KTtcbiAgICBhd2FpdCBtaW50QXJ0d29ya1NoYXJkKHtcbiAgICAgIGFydHdvcmtJZCxcbiAgICAgIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLFxuICAgICAgcmVjaWV2ZXJQaHJhc2U6IFVTRVIyX1BIUkFTRSxcbiAgICAgIHNoYXJlczogMTAwLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgICAgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELFxuICAgIH0pO1xuICB9KTtcblxuICBpdChcImNhbiBzdGFydCBhIHZvdGluZyBzZXNzaW9uXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB2b3RlUmVxdWVzdCA9IGF3YWl0IGNyZWF0ZVZvdGVSZXF1ZXN0KHsgYXJ0d29ya19pZDogYXJ0d29ya0lkLCByZXF1ZXN0OiBcIlJlcXVlc3QgdG8gc2VsbCBhcnR3b3JrIHRvIE11c2V1bVwiLCBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLCBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQgfSk7XG4gICAgYXNzZXJ0Lm9rKHZvdGVSZXF1ZXN0KTtcbiAgfSk7XG5cbiAgaXQoXCJjYW4gdm90ZSBhcyBhIHNoYXJlaG9sZGVyXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB2b3RlUmVxdWVzdCA9IGF3YWl0IGNyZWF0ZVZvdGVSZXF1ZXN0KHsgYXJ0d29ya19pZDogYXJ0d29ya0lkLCByZXF1ZXN0OiBcIlJlcXVlc3QgdG8gc2VsbCBhcnR3b3JrIHRvIE11c2V1bVwiLCBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLCBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQgfSk7XG4gICAgYXNzZXJ0Lm9rKHZvdGVSZXF1ZXN0KTtcbiAgICBjb25zdCB1c2VyVm90ZSA9IGF3YWl0IHZvdGUoeyBhcnR3b3JrOiBhcnR3b3JrSWQsIHZvdGVSZXF1ZXN0LCB2b3RlckFjY291bnQ6IFVTRVIxX1BIUkFTRSwgY2hvaWNlOiB0cnVlIH0pO1xuICAgIGFzc2VydC5vayh1c2VyVm90ZSk7XG4gIH0pO1xuXG4gIGl0KFwiY2Fubm90IGRvdWJsZSB2b3RlIGFzIGEgc2hhcmVob2xkZXJcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHZvdGVSZXF1ZXN0ID0gYXdhaXQgY3JlYXRlVm90ZVJlcXVlc3QoeyBhcnR3b3JrX2lkOiBhcnR3b3JrSWQsIHJlcXVlc3Q6IFwiUmVxdWVzdCB0byBzZWxsIGFydHdvcmsgdG8gTXVzZXVtXCIsIHBhY2thZ2VJZDogUEFDS0FHRV9JRCwgc2lnbmVyUGhyYXNlOiBBRE1JTl9QSFJBU0UsIGFkbWluQ2FwSWQ6IEFETUlOX0NBUF9JRCB9KTtcbiAgICBhc3NlcnQub2sodm90ZVJlcXVlc3QpO1xuICAgIGNvbnN0IHVzZXJWb3RlID0gYXdhaXQgdm90ZSh7IGFydHdvcms6IGFydHdvcmtJZCwgdm90ZVJlcXVlc3QsIHZvdGVyQWNjb3VudDogVVNFUjFfUEhSQVNFLCBjaG9pY2U6IHRydWUgfSk7XG4gICAgYXNzZXJ0Lm9rKHVzZXJWb3RlKTtcbiAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyh2b3RlKHsgYXJ0d29yazogYXJ0d29ya0lkLCB2b3RlUmVxdWVzdCwgdm90ZXJBY2NvdW50OiBVU0VSMV9QSFJBU0UsIGNob2ljZTogdHJ1ZSB9KSk7XG4gIH0pO1xuXG4gIGl0KFwiY2Fubm90IHZvdGUgaWYgbm90IGEgc2hhcmVob2xkZXJcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHZvdGVSZXF1ZXN0ID0gYXdhaXQgY3JlYXRlVm90ZVJlcXVlc3QoeyBhcnR3b3JrX2lkOiBhcnR3b3JrSWQsIHJlcXVlc3Q6IFwiUmVxdWVzdCB0byBzZWxsIGFydHdvcmsgdG8gTXVzZXVtXCIsIHBhY2thZ2VJZDogUEFDS0FHRV9JRCwgc2lnbmVyUGhyYXNlOiBBRE1JTl9QSFJBU0UsIGFkbWluQ2FwSWQ6IEFETUlOX0NBUF9JRCB9KTtcbiAgICBhc3NlcnQub2sodm90ZVJlcXVlc3QpO1xuICAgIGF3YWl0IGFzc2VydC5yZWplY3RzKHZvdGUoeyBhcnR3b3JrOiBhcnR3b3JrSWQsIHZvdGVSZXF1ZXN0LCB2b3RlckFjY291bnQ6IFVTRVIzX1BIUkFTRSwgY2hvaWNlOiB0cnVlIH0pKTtcbiAgfSk7XG5cbiAgaXQoXCJjYW5ub3Qgdm90ZSBpZiB2b3RlIGlzIGNsb3NlZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgdm90ZVJlcXVlc3QgPSBhd2FpdCBjcmVhdGVWb3RlUmVxdWVzdCh7IGFydHdvcmtfaWQ6IGFydHdvcmtJZCwgcmVxdWVzdDogXCJSZXF1ZXN0IHRvIHNlbGwgYXJ0d29yayB0byBNdXNldW1cIiwgcGFja2FnZUlkOiBQQUNLQUdFX0lELCBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSwgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lEIH0pO1xuICAgIGFzc2VydC5vayh2b3RlUmVxdWVzdCk7XG4gICAgY29uc3QgdXNlclZvdGUgPSBhd2FpdCB2b3RlKHsgYXJ0d29yazogYXJ0d29ya0lkLCB2b3RlUmVxdWVzdCwgdm90ZXJBY2NvdW50OiBVU0VSMV9QSFJBU0UsIGNob2ljZTogdHJ1ZSB9KTtcbiAgICBhc3NlcnQub2sodXNlclZvdGUpO1xuICAgIGNvbnN0IGVuZFZvdGVSZXF1ZXN0ID0gYXdhaXQgZW5kUmVxdWVzdFZvdGluZyh7IHZvdGVSZXF1ZXN0LCBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLCBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQgfSk7XG4gICAgYXNzZXJ0Lm9rKGVuZFZvdGVSZXF1ZXN0KTtcbiAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyh2b3RlKHsgYXJ0d29yazogYXJ0d29ya0lkLCB2b3RlUmVxdWVzdCwgdm90ZXJBY2NvdW50OiBVU0VSMV9QSFJBU0UsIGNob2ljZTogdHJ1ZSB9KSk7XG4gIH0pO1xufSk7XG4iXX0=