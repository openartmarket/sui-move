"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const artwork_1 = require("../src/artwork");
const artwork_shard_1 = require("../src/artwork_shard");
const config_1 = require("../src/config");
const end_request_voting_1 = require("../src/end_request_voting");
const vote_1 = require("../src/vote");
const vote_request_1 = require("../src/vote_request");
const test_helpers_1 = require("./test-helpers");
const artworkOptions = {
    signerPhrase: test_helpers_1.ADMIN_PHRASE,
    packageId: config_1.PACKAGE_ID,
    adminCapId: test_helpers_1.ADMIN_CAP_ID,
    totalSupply: 500,
    sharePrice: 10,
    multiplier: 100,
    name: "Mona Lisa",
    artist: "Leonardo da Vinci",
    creationDate: "1685548680595",
    description: "Choconta painting",
    currency: "NOK",
    image: "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg/800px-Mona_Lisa%2C_by_Leonardo_da_Vinci%2C_from_C2RMF_retouched.jpg",
};
describe("DAO Voting structure", () => {
    let artworkId;
    beforeEach(async () => {
        artworkId = await (0, artwork_1.mintArtwork)(artworkOptions);
        await (0, artwork_shard_1.mintArtworkShard)({
            artworkId,
            signerPhrase: test_helpers_1.ADMIN_PHRASE,
            receiverAddress: test_helpers_1.ADMIN_ADDRESS,
            shares: 151,
            packageId: config_1.PACKAGE_ID,
            adminCapId: test_helpers_1.ADMIN_CAP_ID,
        });
        await (0, artwork_shard_1.mintArtworkShard)({
            artworkId,
            signerPhrase: test_helpers_1.ADMIN_PHRASE,
            receiverAddress: test_helpers_1.USER1_ADDRESS,
            shares: 249,
            packageId: config_1.PACKAGE_ID,
            adminCapId: test_helpers_1.ADMIN_CAP_ID,
        });
        await (0, artwork_shard_1.mintArtworkShard)({
            artworkId,
            signerPhrase: test_helpers_1.ADMIN_PHRASE,
            receiverAddress: test_helpers_1.USER2_ADDRESS,
            shares: 100,
            packageId: config_1.PACKAGE_ID,
            adminCapId: test_helpers_1.ADMIN_CAP_ID,
        });
    });
    it("can start a voting session", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({
            artworkId,
            request: "Request to sell artwork to Museum",
            packageId: config_1.PACKAGE_ID,
            signerPhrase: test_helpers_1.ADMIN_PHRASE,
            adminCapId: test_helpers_1.ADMIN_CAP_ID,
        });
        assert_1.default.ok(voteRequest);
    });
    it("can vote as a shareholder", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({
            artworkId,
            request: "Request to sell artwork to Museum",
            packageId: config_1.PACKAGE_ID,
            signerPhrase: test_helpers_1.ADMIN_PHRASE,
            adminCapId: test_helpers_1.ADMIN_CAP_ID,
        });
        assert_1.default.ok(voteRequest);
        const userVote = await (0, vote_1.vote)({
            artworkId,
            voteRequest,
            voterAccount: test_helpers_1.USER1_PHRASE,
            choice: true,
        });
        assert_1.default.ok(userVote);
    });
    it("cannot double vote as a shareholder", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({
            artworkId,
            request: "Request to sell artwork to Museum",
            packageId: config_1.PACKAGE_ID,
            signerPhrase: test_helpers_1.ADMIN_PHRASE,
            adminCapId: test_helpers_1.ADMIN_CAP_ID,
        });
        assert_1.default.ok(voteRequest);
        const userVote = await (0, vote_1.vote)({
            artworkId,
            voteRequest,
            voterAccount: test_helpers_1.USER1_PHRASE,
            choice: true,
        });
        assert_1.default.ok(userVote);
        await assert_1.default.rejects((0, vote_1.vote)({ artworkId, voteRequest, voterAccount: test_helpers_1.USER1_PHRASE, choice: true }));
    });
    it("cannot vote if not a shareholder", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({
            artworkId,
            request: "Request to sell artwork to Museum",
            packageId: config_1.PACKAGE_ID,
            signerPhrase: test_helpers_1.ADMIN_PHRASE,
            adminCapId: test_helpers_1.ADMIN_CAP_ID,
        });
        assert_1.default.ok(voteRequest);
        await assert_1.default.rejects((0, vote_1.vote)({ artworkId, voteRequest, voterAccount: test_helpers_1.USER3_PHRASE, choice: true }));
    });
    it("cannot vote if vote is closed", async () => {
        const voteRequest = await (0, vote_request_1.createVoteRequest)({
            artworkId,
            request: "Request to sell artwork to Museum",
            packageId: config_1.PACKAGE_ID,
            signerPhrase: test_helpers_1.ADMIN_PHRASE,
            adminCapId: test_helpers_1.ADMIN_CAP_ID,
        });
        assert_1.default.ok(voteRequest);
        const userVote = await (0, vote_1.vote)({
            artworkId,
            voteRequest,
            voterAccount: test_helpers_1.USER1_PHRASE,
            choice: true,
        });
        assert_1.default.ok(userVote);
        const endVoteRequest = await (0, end_request_voting_1.endRequestVoting)({
            voteRequest,
            packageId: config_1.PACKAGE_ID,
            signerPhrase: test_helpers_1.ADMIN_PHRASE,
            adminCapId: test_helpers_1.ADMIN_CAP_ID,
        });
        assert_1.default.ok(endVoteRequest);
        await assert_1.default.rejects((0, vote_1.vote)({ artworkId, voteRequest, voterAccount: test_helpers_1.USER1_PHRASE, choice: true }));
    });
});
//# sourceMappingURL=data:application/json;base64,