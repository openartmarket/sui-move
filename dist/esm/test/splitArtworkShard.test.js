import assert from "assert";
import { mintArtwork } from "../src/artwork";
import { mintArtworkShard } from "../src/artwork_shard";
import { PACKAGE_ID } from "../src/config";
import { splitArtworkShard } from "../src/split_artwork_shard";
import { ADMIN_CAP_ID, ADMIN_PHRASE, USER1_ADDRESS, USER1_PHRASE } from "./test-helpers";
import { getObject } from "./test-helpers";
import { mintArtworkOptions } from "./testdata";
describe("splitArtworkShard", () => {
    let artworkId;
    beforeEach(async () => {
        artworkId = await mintArtwork(mintArtworkOptions);
    });
    it("should split an artwork shard", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 10,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const splitShardId = await splitArtworkShard({
            artworkShardId,
            signerPhrase: USER1_PHRASE,
            shares: 2,
            packageId: PACKAGE_ID,
        });
        // Get the shard and check that it has 2 shares
        const splitShard = await getObject(splitShardId.artworkShardId);
        const oldShard = await getObject(artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(splitShard.data.content.fields.shares, "2");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(oldShard.data.content.fields.shares, "8");
    }).timeout(10_000);
    it("should split a split shard", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 12,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const splitShardId = await splitArtworkShard({
            artworkShardId,
            signerPhrase: USER1_PHRASE,
            shares: 5,
            packageId: PACKAGE_ID,
        });
        const splitAgainShardId = await splitArtworkShard({
            artworkShardId: splitShardId.artworkShardId,
            signerPhrase: USER1_PHRASE,
            shares: 3,
            packageId: PACKAGE_ID,
        });
        const oldShard = await getObject(artworkShardId);
        const splitShard = await getObject(splitShardId.artworkShardId);
        const splitAgainShard = await getObject(splitAgainShardId.artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(oldShard.data.content.fields.shares, "7");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(splitShard.data.content.fields.shares, "2");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(splitAgainShard.data.content.fields.shares, "3");
    }).timeout(10_000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRBcnR3b3JrU2hhcmQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3Qvc3BsaXRBcnR3b3JrU2hhcmQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFFNUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFaEQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxJQUFJLFNBQWlCLENBQUM7SUFDdEIsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLFNBQVMsR0FBRyxNQUFNLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtCQUErQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzdDLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLGdCQUFnQixDQUFDO1lBQ2hELFNBQVM7WUFDVCxZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsYUFBYTtZQUM5QixNQUFNLEVBQUUsRUFBRTtZQUNWLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLE1BQU0saUJBQWlCLENBQUM7WUFDM0MsY0FBYztZQUNkLFlBQVksRUFBRSxZQUFZO1lBQzFCLE1BQU0sRUFBRSxDQUFDO1lBQ1QsU0FBUyxFQUFFLFVBQVU7U0FDdEIsQ0FBQyxDQUFDO1FBRUgsK0NBQStDO1FBQy9DLE1BQU0sVUFBVSxHQUFHLE1BQU0sU0FBUyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRSxNQUFNLFFBQVEsR0FBRyxNQUFNLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVqRCw2REFBNkQ7UUFDN0QsYUFBYTtRQUNiLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUUvRCw2REFBNkQ7UUFDN0QsYUFBYTtRQUNiLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFbkIsRUFBRSxDQUFDLDRCQUE0QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLGdCQUFnQixDQUFDO1lBQ2hELFNBQVM7WUFDVCxZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsYUFBYTtZQUM5QixNQUFNLEVBQUUsRUFBRTtZQUNWLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLE1BQU0saUJBQWlCLENBQUM7WUFDM0MsY0FBYztZQUNkLFlBQVksRUFBRSxZQUFZO1lBQzFCLE1BQU0sRUFBRSxDQUFDO1lBQ1QsU0FBUyxFQUFFLFVBQVU7U0FDdEIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLGlCQUFpQixDQUFDO1lBQ2hELGNBQWMsRUFBRSxZQUFZLENBQUMsY0FBYztZQUMzQyxZQUFZLEVBQUUsWUFBWTtZQUMxQixNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxVQUFVO1NBQ3RCLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sVUFBVSxHQUFHLE1BQU0sU0FBUyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRSxNQUFNLGVBQWUsR0FBRyxNQUFNLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUUxRSw2REFBNkQ7UUFDN0QsYUFBYTtRQUNiLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUU3RCw2REFBNkQ7UUFDN0QsYUFBYTtRQUNiLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUUvRCw2REFBNkQ7UUFDN0QsYUFBYTtRQUNiLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0RSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckIsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuaW1wb3J0IHsgbWludEFydHdvcmsgfSBmcm9tIFwiLi4vc3JjL2FydHdvcmtcIjtcbmltcG9ydCB7IG1pbnRBcnR3b3JrU2hhcmQgfSBmcm9tIFwiLi4vc3JjL2FydHdvcmtfc2hhcmRcIjtcbmltcG9ydCB7IFBBQ0tBR0VfSUQgfSBmcm9tIFwiLi4vc3JjL2NvbmZpZ1wiO1xuaW1wb3J0IHsgc3BsaXRBcnR3b3JrU2hhcmQgfSBmcm9tIFwiLi4vc3JjL3NwbGl0X2FydHdvcmtfc2hhcmRcIjtcbmltcG9ydCB7IEFETUlOX0NBUF9JRCwgQURNSU5fUEhSQVNFLCBVU0VSMV9BRERSRVNTLCBVU0VSMV9QSFJBU0UgfSBmcm9tIFwiLi90ZXN0LWhlbHBlcnNcIjtcbmltcG9ydCB7IGdldE9iamVjdCB9IGZyb20gXCIuL3Rlc3QtaGVscGVyc1wiO1xuaW1wb3J0IHsgbWludEFydHdvcmtPcHRpb25zIH0gZnJvbSBcIi4vdGVzdGRhdGFcIjtcblxuZGVzY3JpYmUoXCJzcGxpdEFydHdvcmtTaGFyZFwiLCAoKSA9PiB7XG4gIGxldCBhcnR3b3JrSWQ6IHN0cmluZztcbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgYXJ0d29ya0lkID0gYXdhaXQgbWludEFydHdvcmsobWludEFydHdvcmtPcHRpb25zKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgc3BsaXQgYW4gYXJ0d29yayBzaGFyZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBhcnR3b3JrU2hhcmRJZCB9ID0gYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2VpdmVyQWRkcmVzczogVVNFUjFfQUREUkVTUyxcbiAgICAgIHNoYXJlczogMTAsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG5cbiAgICBjb25zdCBzcGxpdFNoYXJkSWQgPSBhd2FpdCBzcGxpdEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrU2hhcmRJZCxcbiAgICAgIHNpZ25lclBocmFzZTogVVNFUjFfUEhSQVNFLFxuICAgICAgc2hhcmVzOiAyLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgIH0pO1xuXG4gICAgLy8gR2V0IHRoZSBzaGFyZCBhbmQgY2hlY2sgdGhhdCBpdCBoYXMgMiBzaGFyZXNcbiAgICBjb25zdCBzcGxpdFNoYXJkID0gYXdhaXQgZ2V0T2JqZWN0KHNwbGl0U2hhcmRJZC5hcnR3b3JrU2hhcmRJZCk7XG4gICAgY29uc3Qgb2xkU2hhcmQgPSBhd2FpdCBnZXRPYmplY3QoYXJ0d29ya1NoYXJkSWQpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoc3BsaXRTaGFyZC5kYXRhLmNvbnRlbnQuZmllbGRzLnNoYXJlcywgXCIyXCIpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwob2xkU2hhcmQuZGF0YS5jb250ZW50LmZpZWxkcy5zaGFyZXMsIFwiOFwiKTtcbiAgfSkudGltZW91dCgxMF8wMDApO1xuXG4gIGl0KFwic2hvdWxkIHNwbGl0IGEgc3BsaXQgc2hhcmRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgYXJ0d29ya1NoYXJkSWQgfSA9IGF3YWl0IG1pbnRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya0lkLFxuICAgICAgc2lnbmVyUGhyYXNlOiBBRE1JTl9QSFJBU0UsXG4gICAgICByZWNlaXZlckFkZHJlc3M6IFVTRVIxX0FERFJFU1MsXG4gICAgICBzaGFyZXM6IDEyLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgICAgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3BsaXRTaGFyZElkID0gYXdhaXQgc3BsaXRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya1NoYXJkSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IFVTRVIxX1BIUkFTRSxcbiAgICAgIHNoYXJlczogNSxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICB9KTtcbiAgICBjb25zdCBzcGxpdEFnYWluU2hhcmRJZCA9IGF3YWl0IHNwbGl0QXJ0d29ya1NoYXJkKHtcbiAgICAgIGFydHdvcmtTaGFyZElkOiBzcGxpdFNoYXJkSWQuYXJ0d29ya1NoYXJkSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IFVTRVIxX1BIUkFTRSxcbiAgICAgIHNoYXJlczogMyxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICB9KTtcblxuICAgIGNvbnN0IG9sZFNoYXJkID0gYXdhaXQgZ2V0T2JqZWN0KGFydHdvcmtTaGFyZElkKTtcbiAgICBjb25zdCBzcGxpdFNoYXJkID0gYXdhaXQgZ2V0T2JqZWN0KHNwbGl0U2hhcmRJZC5hcnR3b3JrU2hhcmRJZCk7XG4gICAgY29uc3Qgc3BsaXRBZ2FpblNoYXJkID0gYXdhaXQgZ2V0T2JqZWN0KHNwbGl0QWdhaW5TaGFyZElkLmFydHdvcmtTaGFyZElkKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKG9sZFNoYXJkLmRhdGEuY29udGVudC5maWVsZHMuc2hhcmVzLCBcIjdcIik7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChzcGxpdFNoYXJkLmRhdGEuY29udGVudC5maWVsZHMuc2hhcmVzLCBcIjJcIik7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChzcGxpdEFnYWluU2hhcmQuZGF0YS5jb250ZW50LmZpZWxkcy5zaGFyZXMsIFwiM1wiKTtcbiAgfSkudGltZW91dCgxMF8wMDApO1xufSk7XG4iXX0=