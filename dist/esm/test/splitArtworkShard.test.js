import assert from "assert";
import { mintArtwork } from "../src/artwork";
import { mintArtworkShard } from "../src/artwork_shard";
import { ADMIN_CAP_ID, ADMIN_PHRASE, PACKAGE_ID, USER1_PHRASE } from "../src/config";
import { splitArtworkShard } from "../src/split_artwork_shard";
import { getObject } from "./test-helpers";
import { mintArtworkOptions } from "./testdata";
describe("splitArtworkShard", () => {
    let artworkId;
    beforeEach(async () => {
        artworkId = await mintArtwork(mintArtworkOptions);
    });
    it("should split an artwork shard", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            recieverPhrase: USER1_PHRASE,
            shares: 10,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const splitShardId = await splitArtworkShard({
            artworkShardId,
            signerPhrase: USER1_PHRASE,
            shares: 2,
            packageId: PACKAGE_ID
        });
        // Get the shard and check that it has 2 shares
        const splitShard = await getObject(splitShardId.artworkShardId);
        const oldShard = await getObject(artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(splitShard.data.content.fields.shares, "2");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(oldShard.data.content.fields.shares, "8");
    }).timeout(10_000);
    it("should split a split shard", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            recieverPhrase: USER1_PHRASE,
            shares: 12,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const splitShardId = await splitArtworkShard({
            artworkShardId,
            signerPhrase: USER1_PHRASE,
            shares: 5,
            packageId: PACKAGE_ID
        });
        const splitAgainShardId = await splitArtworkShard({
            artworkShardId: splitShardId.artworkShardId,
            signerPhrase: USER1_PHRASE,
            shares: 3,
            packageId: PACKAGE_ID
        });
        const oldShard = await getObject(artworkShardId);
        const splitShard = await getObject(splitShardId.artworkShardId);
        const splitAgainShard = await getObject(splitAgainShardId.artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(oldShard.data.content.fields.shares, "7");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(splitShard.data.content.fields.shares, "2");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(splitAgainShard.data.content.fields.shares, "3");
    }).timeout(10_000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRBcnR3b3JrU2hhcmQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3Qvc3BsaXRBcnR3b3JrU2hhcmQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFFNUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVoRCxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksU0FBaUIsQ0FBQztJQUN0QixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsU0FBUyxHQUFHLE1BQU0sV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDN0MsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sZ0JBQWdCLENBQUM7WUFDaEQsU0FBUztZQUNULFlBQVksRUFBRSxZQUFZO1lBQzFCLGNBQWMsRUFBRSxZQUFZO1lBQzVCLE1BQU0sRUFBRSxFQUFFO1lBQ1YsU0FBUyxFQUFFLFVBQVU7WUFDckIsVUFBVSxFQUFFLFlBQVk7U0FDekIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQztZQUMzQyxjQUFjO1lBQ2QsWUFBWSxFQUFFLFlBQVk7WUFDMUIsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUUsVUFBVTtTQUN0QixDQUFDLENBQUM7UUFFSCwrQ0FBK0M7UUFDL0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxTQUFTLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRWpELDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRS9ELDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVuQixFQUFFLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDMUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sZ0JBQWdCLENBQUM7WUFDaEQsU0FBUztZQUNULFlBQVksRUFBRSxZQUFZO1lBQzFCLGNBQWMsRUFBRSxZQUFZO1lBQzVCLE1BQU0sRUFBRSxFQUFFO1lBQ1YsU0FBUyxFQUFFLFVBQVU7WUFDckIsVUFBVSxFQUFFLFlBQVk7U0FDekIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxZQUFZLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQztZQUMzQyxjQUFjO1lBQ2QsWUFBWSxFQUFFLFlBQVk7WUFDMUIsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUUsVUFBVTtTQUN0QixDQUFDLENBQUM7UUFDSCxNQUFNLGlCQUFpQixHQUFHLE1BQU0saUJBQWlCLENBQUM7WUFDaEQsY0FBYyxFQUFFLFlBQVksQ0FBQyxjQUFjO1lBQzNDLFlBQVksRUFBRSxZQUFZO1lBQzFCLE1BQU0sRUFBRSxDQUFDO1lBQ1QsU0FBUyxFQUFFLFVBQVU7U0FDdEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsTUFBTSxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQUcsTUFBTSxTQUFTLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sZUFBZSxHQUFHLE1BQU0sU0FBUyxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTFFLDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTdELDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRS9ELDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3RFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG5pbXBvcnQgeyBtaW50QXJ0d29yayB9IGZyb20gXCIuLi9zcmMvYXJ0d29ya1wiO1xuaW1wb3J0IHsgbWludEFydHdvcmtTaGFyZCB9IGZyb20gXCIuLi9zcmMvYXJ0d29ya19zaGFyZFwiO1xuaW1wb3J0IHsgQURNSU5fQ0FQX0lELCBBRE1JTl9QSFJBU0UsIFBBQ0tBR0VfSUQsIFVTRVIxX1BIUkFTRSB9IGZyb20gXCIuLi9zcmMvY29uZmlnXCI7XG5pbXBvcnQgeyBzcGxpdEFydHdvcmtTaGFyZCB9IGZyb20gXCIuLi9zcmMvc3BsaXRfYXJ0d29ya19zaGFyZFwiO1xuaW1wb3J0IHsgZ2V0T2JqZWN0IH0gZnJvbSBcIi4vdGVzdC1oZWxwZXJzXCI7XG5pbXBvcnQgeyBtaW50QXJ0d29ya09wdGlvbnMgfSBmcm9tIFwiLi90ZXN0ZGF0YVwiO1xuXG5kZXNjcmliZShcInNwbGl0QXJ0d29ya1NoYXJkXCIsICgpID0+IHtcbiAgbGV0IGFydHdvcmtJZDogc3RyaW5nO1xuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhcnR3b3JrSWQgPSBhd2FpdCBtaW50QXJ0d29yayhtaW50QXJ0d29ya09wdGlvbnMpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBzcGxpdCBhbiBhcnR3b3JrIHNoYXJkXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGFydHdvcmtTaGFyZElkIH0gPSBhd2FpdCBtaW50QXJ0d29ya1NoYXJkKHtcbiAgICAgIGFydHdvcmtJZCxcbiAgICAgIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLFxuICAgICAgcmVjaWV2ZXJQaHJhc2U6IFVTRVIxX1BIUkFTRSxcbiAgICAgIHNoYXJlczogMTAsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG5cbiAgICBjb25zdCBzcGxpdFNoYXJkSWQgPSBhd2FpdCBzcGxpdEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrU2hhcmRJZCxcbiAgICAgIHNpZ25lclBocmFzZTogVVNFUjFfUEhSQVNFLFxuICAgICAgc2hhcmVzOiAyLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lEXG4gICAgfSk7XG5cbiAgICAvLyBHZXQgdGhlIHNoYXJkIGFuZCBjaGVjayB0aGF0IGl0IGhhcyAyIHNoYXJlc1xuICAgIGNvbnN0IHNwbGl0U2hhcmQgPSBhd2FpdCBnZXRPYmplY3Qoc3BsaXRTaGFyZElkLmFydHdvcmtTaGFyZElkKTtcbiAgICBjb25zdCBvbGRTaGFyZCA9IGF3YWl0IGdldE9iamVjdChhcnR3b3JrU2hhcmRJZCk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChzcGxpdFNoYXJkLmRhdGEuY29udGVudC5maWVsZHMuc2hhcmVzLCBcIjJcIik7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChvbGRTaGFyZC5kYXRhLmNvbnRlbnQuZmllbGRzLnNoYXJlcywgXCI4XCIpO1xuICB9KS50aW1lb3V0KDEwXzAwMCk7XG5cbiAgaXQoXCJzaG91bGQgc3BsaXQgYSBzcGxpdCBzaGFyZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBhcnR3b3JrU2hhcmRJZCB9ID0gYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2lldmVyUGhyYXNlOiBVU0VSMV9QSFJBU0UsXG4gICAgICBzaGFyZXM6IDEyLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgICAgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3BsaXRTaGFyZElkID0gYXdhaXQgc3BsaXRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya1NoYXJkSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IFVTRVIxX1BIUkFTRSxcbiAgICAgIHNoYXJlczogNSxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRFxuICAgIH0pO1xuICAgIGNvbnN0IHNwbGl0QWdhaW5TaGFyZElkID0gYXdhaXQgc3BsaXRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya1NoYXJkSWQ6IHNwbGl0U2hhcmRJZC5hcnR3b3JrU2hhcmRJZCxcbiAgICAgIHNpZ25lclBocmFzZTogVVNFUjFfUEhSQVNFLFxuICAgICAgc2hhcmVzOiAzLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lEXG4gICAgfSk7XG5cbiAgICBjb25zdCBvbGRTaGFyZCA9IGF3YWl0IGdldE9iamVjdChhcnR3b3JrU2hhcmRJZCk7XG4gICAgY29uc3Qgc3BsaXRTaGFyZCA9IGF3YWl0IGdldE9iamVjdChzcGxpdFNoYXJkSWQuYXJ0d29ya1NoYXJkSWQpO1xuICAgIGNvbnN0IHNwbGl0QWdhaW5TaGFyZCA9IGF3YWl0IGdldE9iamVjdChzcGxpdEFnYWluU2hhcmRJZC5hcnR3b3JrU2hhcmRJZCk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChvbGRTaGFyZC5kYXRhLmNvbnRlbnQuZmllbGRzLnNoYXJlcywgXCI3XCIpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoc3BsaXRTaGFyZC5kYXRhLmNvbnRlbnQuZmllbGRzLnNoYXJlcywgXCIyXCIpO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwoc3BsaXRBZ2FpblNoYXJkLmRhdGEuY29udGVudC5maWVsZHMuc2hhcmVzLCBcIjNcIik7XG4gIH0pLnRpbWVvdXQoMTBfMDAwKTtcbn0pO1xuIl19