import assert from "assert";
import { mintArtwork } from "../src/artwork";
import { mintArtworkShard } from "../src/artwork_shard";
import { PACKAGE_ID } from "../src/config";
import { findObjectIdInOwnedObjectList } from "../src/findObjectIdWithOwnerAddress";
import { splitArtworkShard } from "../src/split_artwork_shard";
import { transferArtworkShard } from "../src/transfer_artwork_shard";
import { ADMIN_CAP_ID, ADMIN_PHRASE, getObject, getOwnedObjects, USER1_ADDRESS, USER1_PHRASE, USER2_ADDRESS, USER2_PHRASE, } from "./test-helpers";
import { mintArtworkOptions } from "./testdata";
describe("transferArtworkShard", () => {
    let artworkId;
    beforeEach(async () => {
        artworkId = await mintArtwork(mintArtworkOptions);
    });
    it("should mint a shard and then transfer it", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 12,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        await transferArtworkShard({
            artworkId,
            artworkShardId,
            signerPhrase: USER1_PHRASE,
            receiverAddress: USER2_ADDRESS,
            packageId: PACKAGE_ID,
        });
        const transferredShard = await getObject(artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(transferredShard.data.content.fields.shares, "12");
    }).timeout(10_000);
    it("should split a split shard and transfer it to new owner", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER2_ADDRESS,
            shares: 12,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const splitShardId1 = await splitArtworkShard({
            artworkShardId,
            signerPhrase: USER2_PHRASE,
            shares: 5,
            packageId: PACKAGE_ID,
        });
        const oldShard = await getObject(artworkShardId);
        const splitShard = await getObject(splitShardId1.artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(oldShard.data.content.fields.shares, "7");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(splitShard.data.content.fields.shares, "5");
        const transferArtworkShardResponse = await transferArtworkShard({
            artworkId,
            artworkShardId: splitShardId1.artworkShardId,
            signerPhrase: USER2_PHRASE,
            receiverAddress: USER1_ADDRESS,
            packageId: PACKAGE_ID,
        });
        const ownedObjects = await getOwnedObjects(transferArtworkShardResponse.owner);
        const transferredShard = findObjectIdInOwnedObjectList(ownedObjects, splitShardId1.artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(transferredShard.data.objectId, splitShardId1.artworkShardId);
    }).timeout(10_000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXJBcnR3b3JrU2hhcmQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvdHJhbnNmZXJBcnR3b3JrU2hhcmQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFHNUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDcEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUNMLFlBQVksRUFDWixZQUFZLEVBQ1osU0FBUyxFQUNULGVBQWUsRUFDZixhQUFhLEVBQ2IsWUFBWSxFQUNaLGFBQWEsRUFDYixZQUFZLEdBQ2IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFaEQsUUFBUSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNwQyxJQUFJLFNBQWlCLENBQUM7SUFDdEIsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLFNBQVMsR0FBRyxNQUFNLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3hELE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLGdCQUFnQixDQUFDO1lBQ2hELFNBQVM7WUFDVCxZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsYUFBYTtZQUM5QixNQUFNLEVBQUUsRUFBRTtZQUNWLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUMsQ0FBQztRQUVILE1BQU0sb0JBQW9CLENBQUM7WUFDekIsU0FBUztZQUNULGNBQWM7WUFDZCxZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsYUFBYTtZQUM5QixTQUFTLEVBQUUsVUFBVTtTQUN0QixDQUFDLENBQUM7UUFFSCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3pELDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRW5CLEVBQUUsQ0FBQyx5REFBeUQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2RSxNQUFNLEVBQUUsY0FBYyxFQUFFLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQztZQUNoRCxTQUFTO1lBQ1QsWUFBWSxFQUFFLFlBQVk7WUFDMUIsZUFBZSxFQUFFLGFBQWE7WUFDOUIsTUFBTSxFQUFFLEVBQUU7WUFDVixTQUFTLEVBQUUsVUFBVTtZQUNyQixVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQUM7UUFFSCxNQUFNLGFBQWEsR0FBRyxNQUFNLGlCQUFpQixDQUFDO1lBQzVDLGNBQWM7WUFDZCxZQUFZLEVBQUUsWUFBWTtZQUMxQixNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxVQUFVO1NBQ3RCLENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sVUFBVSxHQUFHLE1BQU0sU0FBUyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNqRSw2REFBNkQ7UUFDN0QsYUFBYTtRQUNiLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUU3RCw2REFBNkQ7UUFDN0QsYUFBYTtRQUNiLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUUvRCxNQUFNLDRCQUE0QixHQUFHLE1BQU0sb0JBQW9CLENBQUM7WUFDOUQsU0FBUztZQUNULGNBQWMsRUFBRSxhQUFhLENBQUMsY0FBYztZQUM1QyxZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsYUFBYTtZQUM5QixTQUFTLEVBQUUsVUFBVTtTQUN0QixDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxNQUFNLGVBQWUsQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvRSxNQUFNLGdCQUFnQixHQUFHLDZCQUE2QixDQUNwRCxZQUErQixFQUMvQixhQUFhLENBQUMsY0FBYyxDQUM3QixDQUFDO1FBQ0YsNkRBQTZEO1FBQzdELGFBQWE7UUFDYixNQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ25GLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG5pbXBvcnQgeyBPd25lZE9iamVjdExpc3QgfSBmcm9tIFwiLi4vc3JjXCI7XG5pbXBvcnQgeyBtaW50QXJ0d29yayB9IGZyb20gXCIuLi9zcmMvYXJ0d29ya1wiO1xuaW1wb3J0IHsgbWludEFydHdvcmtTaGFyZCB9IGZyb20gXCIuLi9zcmMvYXJ0d29ya19zaGFyZFwiO1xuaW1wb3J0IHsgUEFDS0FHRV9JRCB9IGZyb20gXCIuLi9zcmMvY29uZmlnXCI7XG5pbXBvcnQgeyBmaW5kT2JqZWN0SWRJbk93bmVkT2JqZWN0TGlzdCB9IGZyb20gXCIuLi9zcmMvZmluZE9iamVjdElkV2l0aE93bmVyQWRkcmVzc1wiO1xuaW1wb3J0IHsgc3BsaXRBcnR3b3JrU2hhcmQgfSBmcm9tIFwiLi4vc3JjL3NwbGl0X2FydHdvcmtfc2hhcmRcIjtcbmltcG9ydCB7IHRyYW5zZmVyQXJ0d29ya1NoYXJkIH0gZnJvbSBcIi4uL3NyYy90cmFuc2Zlcl9hcnR3b3JrX3NoYXJkXCI7XG5pbXBvcnQge1xuICBBRE1JTl9DQVBfSUQsXG4gIEFETUlOX1BIUkFTRSxcbiAgZ2V0T2JqZWN0LFxuICBnZXRPd25lZE9iamVjdHMsXG4gIFVTRVIxX0FERFJFU1MsXG4gIFVTRVIxX1BIUkFTRSxcbiAgVVNFUjJfQUREUkVTUyxcbiAgVVNFUjJfUEhSQVNFLFxufSBmcm9tIFwiLi90ZXN0LWhlbHBlcnNcIjtcbmltcG9ydCB7IG1pbnRBcnR3b3JrT3B0aW9ucyB9IGZyb20gXCIuL3Rlc3RkYXRhXCI7XG5cbmRlc2NyaWJlKFwidHJhbnNmZXJBcnR3b3JrU2hhcmRcIiwgKCkgPT4ge1xuICBsZXQgYXJ0d29ya0lkOiBzdHJpbmc7XG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGFydHdvcmtJZCA9IGF3YWl0IG1pbnRBcnR3b3JrKG1pbnRBcnR3b3JrT3B0aW9ucyk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIG1pbnQgYSBzaGFyZCBhbmQgdGhlbiB0cmFuc2ZlciBpdFwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBhcnR3b3JrU2hhcmRJZCB9ID0gYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2VpdmVyQWRkcmVzczogVVNFUjFfQUREUkVTUyxcbiAgICAgIHNoYXJlczogMTIsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG5cbiAgICBhd2FpdCB0cmFuc2ZlckFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBhcnR3b3JrU2hhcmRJZCxcbiAgICAgIHNpZ25lclBocmFzZTogVVNFUjFfUEhSQVNFLFxuICAgICAgcmVjZWl2ZXJBZGRyZXNzOiBVU0VSMl9BRERSRVNTLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgIH0pO1xuXG4gICAgY29uc3QgdHJhbnNmZXJyZWRTaGFyZCA9IGF3YWl0IGdldE9iamVjdChhcnR3b3JrU2hhcmRJZCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwodHJhbnNmZXJyZWRTaGFyZC5kYXRhLmNvbnRlbnQuZmllbGRzLnNoYXJlcywgXCIxMlwiKTtcbiAgfSkudGltZW91dCgxMF8wMDApO1xuXG4gIGl0KFwic2hvdWxkIHNwbGl0IGEgc3BsaXQgc2hhcmQgYW5kIHRyYW5zZmVyIGl0IHRvIG5ldyBvd25lclwiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBhcnR3b3JrU2hhcmRJZCB9ID0gYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2VpdmVyQWRkcmVzczogVVNFUjJfQUREUkVTUyxcbiAgICAgIHNoYXJlczogMTIsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG5cbiAgICBjb25zdCBzcGxpdFNoYXJkSWQxID0gYXdhaXQgc3BsaXRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya1NoYXJkSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IFVTRVIyX1BIUkFTRSxcbiAgICAgIHNoYXJlczogNSxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICB9KTtcblxuICAgIGNvbnN0IG9sZFNoYXJkID0gYXdhaXQgZ2V0T2JqZWN0KGFydHdvcmtTaGFyZElkKTtcbiAgICBjb25zdCBzcGxpdFNoYXJkID0gYXdhaXQgZ2V0T2JqZWN0KHNwbGl0U2hhcmRJZDEuYXJ0d29ya1NoYXJkSWQpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKG9sZFNoYXJkLmRhdGEuY29udGVudC5maWVsZHMuc2hhcmVzLCBcIjdcIik7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChzcGxpdFNoYXJkLmRhdGEuY29udGVudC5maWVsZHMuc2hhcmVzLCBcIjVcIik7XG5cbiAgICBjb25zdCB0cmFuc2ZlckFydHdvcmtTaGFyZFJlc3BvbnNlID0gYXdhaXQgdHJhbnNmZXJBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya0lkLFxuICAgICAgYXJ0d29ya1NoYXJkSWQ6IHNwbGl0U2hhcmRJZDEuYXJ0d29ya1NoYXJkSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IFVTRVIyX1BIUkFTRSxcbiAgICAgIHJlY2VpdmVyQWRkcmVzczogVVNFUjFfQUREUkVTUyxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICB9KTtcblxuICAgIGNvbnN0IG93bmVkT2JqZWN0cyA9IGF3YWl0IGdldE93bmVkT2JqZWN0cyh0cmFuc2ZlckFydHdvcmtTaGFyZFJlc3BvbnNlLm93bmVyKTtcbiAgICBjb25zdCB0cmFuc2ZlcnJlZFNoYXJkID0gZmluZE9iamVjdElkSW5Pd25lZE9iamVjdExpc3QoXG4gICAgICBvd25lZE9iamVjdHMgYXMgT3duZWRPYmplY3RMaXN0LFxuICAgICAgc3BsaXRTaGFyZElkMS5hcnR3b3JrU2hhcmRJZFxuICAgICk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwodHJhbnNmZXJyZWRTaGFyZC5kYXRhLm9iamVjdElkLCBzcGxpdFNoYXJkSWQxLmFydHdvcmtTaGFyZElkKTtcbiAgfSkudGltZW91dCgxMF8wMDApO1xufSk7XG4iXX0=