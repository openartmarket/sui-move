import assert from "assert";
import { mintArtwork } from "../src/artwork";
import { mintArtworkShard } from "../src/artwork_shard";
import { ADMIN_CAP_ID, ADMIN_PHRASE, PACKAGE_ID, USER1_PHRASE, USER2_PHRASE } from "../src/config";
import { findObjectIdInOwnedObjectList, } from "../src/findObjectIdWithOwnerAddress";
import { splitArtworkShard } from "../src/split_artwork_shard";
import { transferArtworkShard } from "../src/transfer_artwork_shard";
import { getObject, getOwnedObjects } from "./test-helpers";
import { mintArtworkOptions } from "./testdata";
describe("transferArtworkShard", () => {
    let artworkId;
    beforeEach(async () => {
        artworkId = await mintArtwork(mintArtworkOptions);
    });
    it("should mint a shard and then transfer it", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            recieverPhrase: USER1_PHRASE,
            shares: 12,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        await transferArtworkShard({
            artworkId,
            artworkShardId,
            signerPhrase: USER1_PHRASE,
            recieverPhrase: USER2_PHRASE,
            packageId: PACKAGE_ID
        });
        const transferredShard = await getObject(artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(transferredShard.data.content.fields.shares, "12");
    }).timeout(10_000);
    it("should split a split shard and transfer it to new owner", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            recieverPhrase: USER1_PHRASE,
            shares: 12,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const splitShardId1 = await splitArtworkShard({
            artworkShardId,
            signerPhrase: USER1_PHRASE,
            shares: 5,
            packageId: PACKAGE_ID
        });
        const oldShard = await getObject(artworkShardId);
        const splitShard = await getObject(splitShardId1.artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(oldShard.data.content.fields.shares, "7");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(splitShard.data.content.fields.shares, "5");
        const transferArtworkShardResponse = await transferArtworkShard({
            artworkId,
            artworkShardId: splitShardId1.artworkShardId,
            signerPhrase: USER1_PHRASE,
            recieverPhrase: USER2_PHRASE,
            packageId: PACKAGE_ID
        });
        const ownedObjects = await getOwnedObjects(transferArtworkShardResponse.address);
        const transferredShard = findObjectIdInOwnedObjectList(ownedObjects, splitShardId1.artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(transferredShard.data.objectId, splitShardId1.artworkShardId);
    }).timeout(10_000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXJBcnR3b3JrU2hhcmQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvdHJhbnNmZXJBcnR3b3JrU2hhcmQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFFNUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25HLE9BQU8sRUFDTCw2QkFBNkIsR0FFOUIsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVoRCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksU0FBaUIsQ0FBQztJQUN0QixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsU0FBUyxHQUFHLE1BQU0sV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMENBQTBDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDeEQsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sZ0JBQWdCLENBQUM7WUFDaEQsU0FBUztZQUNULFlBQVksRUFBRSxZQUFZO1lBQzFCLGNBQWMsRUFBRSxZQUFZO1lBQzVCLE1BQU0sRUFBRSxFQUFFO1lBQ1YsU0FBUyxFQUFFLFVBQVU7WUFDckIsVUFBVSxFQUFFLFlBQVk7U0FDekIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxvQkFBb0IsQ0FBQztZQUN6QixTQUFTO1lBQ1QsY0FBYztZQUNkLFlBQVksRUFBRSxZQUFZO1lBQzFCLGNBQWMsRUFBRSxZQUFZO1lBQzVCLFNBQVMsRUFBRSxVQUFVO1NBQ3RCLENBQUMsQ0FBQztRQUVILE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDekQsNkRBQTZEO1FBQzdELGFBQWE7UUFDYixNQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4RSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFbkIsRUFBRSxDQUFDLHlEQUF5RCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3ZFLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLGdCQUFnQixDQUFDO1lBQ2hELFNBQVM7WUFDVCxZQUFZLEVBQUUsWUFBWTtZQUMxQixjQUFjLEVBQUUsWUFBWTtZQUM1QixNQUFNLEVBQUUsRUFBRTtZQUNWLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUMsQ0FBQztRQUVILE1BQU0sYUFBYSxHQUFHLE1BQU0saUJBQWlCLENBQUM7WUFDNUMsY0FBYztZQUNkLFlBQVksRUFBRSxZQUFZO1lBQzFCLE1BQU0sRUFBRSxDQUFDO1lBQ1QsU0FBUyxFQUFFLFVBQVU7U0FDdEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsTUFBTSxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQUcsTUFBTSxTQUFTLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2pFLDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRTdELDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRS9ELE1BQU0sNEJBQTRCLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQztZQUM5RCxTQUFTO1lBQ1QsY0FBYyxFQUFFLGFBQWEsQ0FBQyxjQUFjO1lBQzVDLFlBQVksRUFBRSxZQUFZO1lBQzFCLGNBQWMsRUFBRSxZQUFZO1lBQzVCLFNBQVMsRUFBRSxVQUFVO1NBQ3RCLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLE1BQU0sZUFBZSxDQUFDLDRCQUE0QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pGLE1BQU0sZ0JBQWdCLEdBQUcsNkJBQTZCLENBQ3BELFlBQStCLEVBQy9CLGFBQWEsQ0FBQyxjQUFjLENBQzdCLENBQUM7UUFDRiw2REFBNkQ7UUFDN0QsYUFBYTtRQUNiLE1BQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbkYsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3JCLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5cbmltcG9ydCB7IG1pbnRBcnR3b3JrIH0gZnJvbSBcIi4uL3NyYy9hcnR3b3JrXCI7XG5pbXBvcnQgeyBtaW50QXJ0d29ya1NoYXJkIH0gZnJvbSBcIi4uL3NyYy9hcnR3b3JrX3NoYXJkXCI7XG5pbXBvcnQgeyBBRE1JTl9DQVBfSUQsIEFETUlOX1BIUkFTRSwgUEFDS0FHRV9JRCwgVVNFUjFfUEhSQVNFLCBVU0VSMl9QSFJBU0UgfSBmcm9tIFwiLi4vc3JjL2NvbmZpZ1wiO1xuaW1wb3J0IHtcbiAgZmluZE9iamVjdElkSW5Pd25lZE9iamVjdExpc3QsXG4gIE93bmVkT2JqZWN0TGlzdCxcbn0gZnJvbSBcIi4uL3NyYy9maW5kT2JqZWN0SWRXaXRoT3duZXJBZGRyZXNzXCI7XG5pbXBvcnQgeyBzcGxpdEFydHdvcmtTaGFyZCB9IGZyb20gXCIuLi9zcmMvc3BsaXRfYXJ0d29ya19zaGFyZFwiO1xuaW1wb3J0IHsgdHJhbnNmZXJBcnR3b3JrU2hhcmQgfSBmcm9tIFwiLi4vc3JjL3RyYW5zZmVyX2FydHdvcmtfc2hhcmRcIjtcbmltcG9ydCB7IGdldE9iamVjdCwgZ2V0T3duZWRPYmplY3RzIH0gZnJvbSBcIi4vdGVzdC1oZWxwZXJzXCI7XG5pbXBvcnQgeyBtaW50QXJ0d29ya09wdGlvbnMgfSBmcm9tIFwiLi90ZXN0ZGF0YVwiO1xuXG5kZXNjcmliZShcInRyYW5zZmVyQXJ0d29ya1NoYXJkXCIsICgpID0+IHtcbiAgbGV0IGFydHdvcmtJZDogc3RyaW5nO1xuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhcnR3b3JrSWQgPSBhd2FpdCBtaW50QXJ0d29yayhtaW50QXJ0d29ya09wdGlvbnMpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBtaW50IGEgc2hhcmQgYW5kIHRoZW4gdHJhbnNmZXIgaXRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgYXJ0d29ya1NoYXJkSWQgfSA9IGF3YWl0IG1pbnRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya0lkLFxuICAgICAgc2lnbmVyUGhyYXNlOiBBRE1JTl9QSFJBU0UsXG4gICAgICByZWNpZXZlclBocmFzZTogVVNFUjFfUEhSQVNFLFxuICAgICAgc2hhcmVzOiAxMixcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICAgIGFkbWluQ2FwSWQ6IEFETUlOX0NBUF9JRCxcbiAgICB9KTtcblxuICAgIGF3YWl0IHRyYW5zZmVyQXJ0d29ya1NoYXJkKHtcbiAgICAgIGFydHdvcmtJZCxcbiAgICAgIGFydHdvcmtTaGFyZElkLFxuICAgICAgc2lnbmVyUGhyYXNlOiBVU0VSMV9QSFJBU0UsXG4gICAgICByZWNpZXZlclBocmFzZTogVVNFUjJfUEhSQVNFLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lEXG4gICAgfSk7XG5cbiAgICBjb25zdCB0cmFuc2ZlcnJlZFNoYXJkID0gYXdhaXQgZ2V0T2JqZWN0KGFydHdvcmtTaGFyZElkKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFzc2VydC5zdHJpY3RFcXVhbCh0cmFuc2ZlcnJlZFNoYXJkLmRhdGEuY29udGVudC5maWVsZHMuc2hhcmVzLCBcIjEyXCIpO1xuICB9KS50aW1lb3V0KDEwXzAwMCk7XG5cbiAgaXQoXCJzaG91bGQgc3BsaXQgYSBzcGxpdCBzaGFyZCBhbmQgdHJhbnNmZXIgaXQgdG8gbmV3IG93bmVyXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB7IGFydHdvcmtTaGFyZElkIH0gPSBhd2FpdCBtaW50QXJ0d29ya1NoYXJkKHtcbiAgICAgIGFydHdvcmtJZCxcbiAgICAgIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLFxuICAgICAgcmVjaWV2ZXJQaHJhc2U6IFVTRVIxX1BIUkFTRSxcbiAgICAgIHNoYXJlczogMTIsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG5cbiAgICBjb25zdCBzcGxpdFNoYXJkSWQxID0gYXdhaXQgc3BsaXRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya1NoYXJkSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IFVTRVIxX1BIUkFTRSxcbiAgICAgIHNoYXJlczogNSxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRFxuICAgIH0pO1xuXG4gICAgY29uc3Qgb2xkU2hhcmQgPSBhd2FpdCBnZXRPYmplY3QoYXJ0d29ya1NoYXJkSWQpO1xuICAgIGNvbnN0IHNwbGl0U2hhcmQgPSBhd2FpdCBnZXRPYmplY3Qoc3BsaXRTaGFyZElkMS5hcnR3b3JrU2hhcmRJZCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhc3NlcnQuc3RyaWN0RXF1YWwob2xkU2hhcmQuZGF0YS5jb250ZW50LmZpZWxkcy5zaGFyZXMsIFwiN1wiKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKHNwbGl0U2hhcmQuZGF0YS5jb250ZW50LmZpZWxkcy5zaGFyZXMsIFwiNVwiKTtcblxuICAgIGNvbnN0IHRyYW5zZmVyQXJ0d29ya1NoYXJkUmVzcG9uc2UgPSBhd2FpdCB0cmFuc2ZlckFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBhcnR3b3JrU2hhcmRJZDogc3BsaXRTaGFyZElkMS5hcnR3b3JrU2hhcmRJZCxcbiAgICAgIHNpZ25lclBocmFzZTogVVNFUjFfUEhSQVNFLFxuICAgICAgcmVjaWV2ZXJQaHJhc2U6IFVTRVIyX1BIUkFTRSxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRFxuICAgIH0pO1xuXG4gICAgY29uc3Qgb3duZWRPYmplY3RzID0gYXdhaXQgZ2V0T3duZWRPYmplY3RzKHRyYW5zZmVyQXJ0d29ya1NoYXJkUmVzcG9uc2UuYWRkcmVzcyk7XG4gICAgY29uc3QgdHJhbnNmZXJyZWRTaGFyZCA9IGZpbmRPYmplY3RJZEluT3duZWRPYmplY3RMaXN0KFxuICAgICAgb3duZWRPYmplY3RzIGFzIE93bmVkT2JqZWN0TGlzdCxcbiAgICAgIHNwbGl0U2hhcmRJZDEuYXJ0d29ya1NoYXJkSWRcbiAgICApO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKHRyYW5zZmVycmVkU2hhcmQuZGF0YS5vYmplY3RJZCwgc3BsaXRTaGFyZElkMS5hcnR3b3JrU2hhcmRJZCk7XG4gIH0pLnRpbWVvdXQoMTBfMDAwKTtcbn0pO1xuIl19