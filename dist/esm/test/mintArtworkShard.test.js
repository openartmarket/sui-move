import assert from "assert";
import { mintArtwork } from "../src/artwork";
import { mintArtworkShard } from "../src/artwork_shard";
import { PACKAGE_ID } from "../src/config";
import { ADMIN_ADDRESS, ADMIN_CAP_ID, ADMIN_PHRASE, USER1_ADDRESS, USER2_ADDRESS, } from "./test-helpers";
import { mintArtworkOptions } from "./testdata";
describe("mintArtworkShard", () => {
    let artworkId;
    beforeEach(async () => {
        artworkId = await mintArtwork(mintArtworkOptions);
    });
    it("should issue new shares", async () => {
        await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 2,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
    });
    it("should not issue new shares, when asking for too much", async () => {
        await assert.rejects(mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 501,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        }));
    });
    it("should not issue new shares, when sold out", async () => {
        await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 150,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER2_ADDRESS,
            shares: 250,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 98,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        await assert.rejects(mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER2_ADDRESS,
            shares: 3,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        }));
    });
    it("can give shares to OAM and owner", async () => {
        await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: ADMIN_ADDRESS,
            shares: 150,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 50,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER2_ADDRESS,
            shares: 1,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
    });
    it.skip("can set the outgoing sale price of the artwork", async () => {
        assert.ok(false);
    });
    it.skip("can burn the shares after artwork is sold", async () => {
        assert.ok(false);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludEFydHdvcmtTaGFyZC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9taW50QXJ0d29ya1NoYXJkLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBRTVCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDTCxhQUFhLEVBQ2IsWUFBWSxFQUNaLFlBQVksRUFDWixhQUFhLEVBQ2IsYUFBYSxHQUNkLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRWhELFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsSUFBSSxTQUFpQixDQUFDO0lBQ3RCLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixTQUFTLEdBQUcsTUFBTSxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2QyxNQUFNLGdCQUFnQixDQUFDO1lBQ3JCLFNBQVM7WUFDVCxZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsYUFBYTtZQUM5QixNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVEQUF1RCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3JFLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FDbEIsZ0JBQWdCLENBQUM7WUFDZixTQUFTO1lBQ1QsWUFBWSxFQUFFLFlBQVk7WUFDMUIsZUFBZSxFQUFFLGFBQWE7WUFDOUIsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsVUFBVTtZQUNyQixVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzFELE1BQU0sZ0JBQWdCLENBQUM7WUFDckIsU0FBUztZQUNULFlBQVksRUFBRSxZQUFZO1lBQzFCLGVBQWUsRUFBRSxhQUFhO1lBQzlCLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLFVBQVU7WUFDckIsVUFBVSxFQUFFLFlBQVk7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxnQkFBZ0IsQ0FBQztZQUNyQixTQUFTO1lBQ1QsWUFBWSxFQUFFLFlBQVk7WUFDMUIsZUFBZSxFQUFFLGFBQWE7WUFDOUIsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsVUFBVTtZQUNyQixVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQUM7UUFDSCxNQUFNLGdCQUFnQixDQUFDO1lBQ3JCLFNBQVM7WUFDVCxZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsYUFBYTtZQUM5QixNQUFNLEVBQUUsRUFBRTtZQUNWLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUMsQ0FBQztRQUNILE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FDbEIsZ0JBQWdCLENBQUM7WUFDZixTQUFTO1lBQ1QsWUFBWSxFQUFFLFlBQVk7WUFDMUIsZUFBZSxFQUFFLGFBQWE7WUFDOUIsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUUsVUFBVTtZQUNyQixVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2hELE1BQU0sZ0JBQWdCLENBQUM7WUFDckIsU0FBUztZQUNULFlBQVksRUFBRSxZQUFZO1lBQzFCLGVBQWUsRUFBRSxhQUFhO1lBQzlCLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLFVBQVU7WUFDckIsVUFBVSxFQUFFLFlBQVk7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxnQkFBZ0IsQ0FBQztZQUNyQixTQUFTO1lBQ1QsWUFBWSxFQUFFLFlBQVk7WUFDMUIsZUFBZSxFQUFFLGFBQWE7WUFDOUIsTUFBTSxFQUFFLEVBQUU7WUFDVixTQUFTLEVBQUUsVUFBVTtZQUNyQixVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQUM7UUFDSCxNQUFNLGdCQUFnQixDQUFDO1lBQ3JCLFNBQVM7WUFDVCxZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsYUFBYTtZQUM5QixNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLElBQUksQ0FBQyxnREFBZ0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuRSxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0lBQ0gsRUFBRSxDQUFDLElBQUksQ0FBQywyQ0FBMkMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM5RCxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuaW1wb3J0IHsgbWludEFydHdvcmsgfSBmcm9tIFwiLi4vc3JjL2FydHdvcmtcIjtcbmltcG9ydCB7IG1pbnRBcnR3b3JrU2hhcmQgfSBmcm9tIFwiLi4vc3JjL2FydHdvcmtfc2hhcmRcIjtcbmltcG9ydCB7IFBBQ0tBR0VfSUQgfSBmcm9tIFwiLi4vc3JjL2NvbmZpZ1wiO1xuaW1wb3J0IHtcbiAgQURNSU5fQUREUkVTUyxcbiAgQURNSU5fQ0FQX0lELFxuICBBRE1JTl9QSFJBU0UsXG4gIFVTRVIxX0FERFJFU1MsXG4gIFVTRVIyX0FERFJFU1MsXG59IGZyb20gXCIuL3Rlc3QtaGVscGVyc1wiO1xuaW1wb3J0IHsgbWludEFydHdvcmtPcHRpb25zIH0gZnJvbSBcIi4vdGVzdGRhdGFcIjtcblxuZGVzY3JpYmUoXCJtaW50QXJ0d29ya1NoYXJkXCIsICgpID0+IHtcbiAgbGV0IGFydHdvcmtJZDogc3RyaW5nO1xuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhcnR3b3JrSWQgPSBhd2FpdCBtaW50QXJ0d29yayhtaW50QXJ0d29ya09wdGlvbnMpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBpc3N1ZSBuZXcgc2hhcmVzXCIsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBtaW50QXJ0d29ya1NoYXJkKHtcbiAgICAgIGFydHdvcmtJZCxcbiAgICAgIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLFxuICAgICAgcmVjZWl2ZXJBZGRyZXNzOiBVU0VSMV9BRERSRVNTLFxuICAgICAgc2hhcmVzOiAyLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgICAgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELFxuICAgIH0pO1xuICB9KTtcblxuICBpdChcInNob3VsZCBub3QgaXNzdWUgbmV3IHNoYXJlcywgd2hlbiBhc2tpbmcgZm9yIHRvbyBtdWNoXCIsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBhc3NlcnQucmVqZWN0cyhcbiAgICAgIG1pbnRBcnR3b3JrU2hhcmQoe1xuICAgICAgICBhcnR3b3JrSWQsXG4gICAgICAgIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLFxuICAgICAgICByZWNlaXZlckFkZHJlc3M6IFVTRVIxX0FERFJFU1MsXG4gICAgICAgIHNoYXJlczogNTAxLFxuICAgICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICAgIGFkbWluQ2FwSWQ6IEFETUlOX0NBUF9JRCxcbiAgICAgIH0pXG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgbm90IGlzc3VlIG5ldyBzaGFyZXMsIHdoZW4gc29sZCBvdXRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IG1pbnRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya0lkLFxuICAgICAgc2lnbmVyUGhyYXNlOiBBRE1JTl9QSFJBU0UsXG4gICAgICByZWNlaXZlckFkZHJlc3M6IFVTRVIxX0FERFJFU1MsXG4gICAgICBzaGFyZXM6IDE1MCxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICAgIGFkbWluQ2FwSWQ6IEFETUlOX0NBUF9JRCxcbiAgICB9KTtcbiAgICBhd2FpdCBtaW50QXJ0d29ya1NoYXJkKHtcbiAgICAgIGFydHdvcmtJZCxcbiAgICAgIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLFxuICAgICAgcmVjZWl2ZXJBZGRyZXNzOiBVU0VSMl9BRERSRVNTLFxuICAgICAgc2hhcmVzOiAyNTAsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG4gICAgYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2VpdmVyQWRkcmVzczogVVNFUjFfQUREUkVTUyxcbiAgICAgIHNoYXJlczogOTgsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG4gICAgYXdhaXQgYXNzZXJ0LnJlamVjdHMoXG4gICAgICBtaW50QXJ0d29ya1NoYXJkKHtcbiAgICAgICAgYXJ0d29ya0lkLFxuICAgICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgICAgcmVjZWl2ZXJBZGRyZXNzOiBVU0VSMl9BRERSRVNTLFxuICAgICAgICBzaGFyZXM6IDMsXG4gICAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICAgICAgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELFxuICAgICAgfSlcbiAgICApO1xuICB9KTtcblxuICBpdChcImNhbiBnaXZlIHNoYXJlcyB0byBPQU0gYW5kIG93bmVyXCIsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBtaW50QXJ0d29ya1NoYXJkKHtcbiAgICAgIGFydHdvcmtJZCxcbiAgICAgIHNpZ25lclBocmFzZTogQURNSU5fUEhSQVNFLFxuICAgICAgcmVjZWl2ZXJBZGRyZXNzOiBBRE1JTl9BRERSRVNTLFxuICAgICAgc2hhcmVzOiAxNTAsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG4gICAgYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2VpdmVyQWRkcmVzczogVVNFUjFfQUREUkVTUyxcbiAgICAgIHNoYXJlczogNTAsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG4gICAgYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2VpdmVyQWRkcmVzczogVVNFUjJfQUREUkVTUyxcbiAgICAgIHNoYXJlczogMSxcbiAgICAgIHBhY2thZ2VJZDogUEFDS0FHRV9JRCxcbiAgICAgIGFkbWluQ2FwSWQ6IEFETUlOX0NBUF9JRCxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQuc2tpcChcImNhbiBzZXQgdGhlIG91dGdvaW5nIHNhbGUgcHJpY2Ugb2YgdGhlIGFydHdvcmtcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGFzc2VydC5vayhmYWxzZSk7XG4gIH0pO1xuICBpdC5za2lwKFwiY2FuIGJ1cm4gdGhlIHNoYXJlcyBhZnRlciBhcnR3b3JrIGlzIHNvbGRcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGFzc2VydC5vayhmYWxzZSk7XG4gIH0pO1xufSk7XG4iXX0=