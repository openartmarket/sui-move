import assert from "assert";
import { mintArtwork } from "../src/artwork";
import { mintArtworkShard } from "../src/artwork_shard";
import { ADMIN_CAP_ID, ADMIN_PHRASE, PACKAGE_ID, USER1_PHRASE } from "../src/config";
import { mergeArtworkShard } from "../src/merge_artwork_shard";
import { getObject } from "./test-helpers";
import { mintArtworkOptions } from "./testdata";
describe("mergeArtworkShard", () => {
    let artworkId;
    beforeEach(async () => {
        artworkId = await mintArtwork(mintArtworkOptions);
    });
    it("should merge artwork shards", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            recieverPhrase: USER1_PHRASE,
            shares: 10,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const { artworkShardId: artworkShard2Id } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            recieverPhrase: USER1_PHRASE,
            shares: 10,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const mergeArtworkShards = await mergeArtworkShard({
            artworkShard1Id: artworkShardId,
            artworkShard2Id,
            signerPhrase: USER1_PHRASE,
            packageId: PACKAGE_ID,
        });
        const burnedShard = await getObject(artworkShard2Id);
        const newShard = await getObject(mergeArtworkShards.artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(newShard.data.content.fields.shares, "20");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(burnedShard.error.code, "deleted");
    }).timeout(10_000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VBcnR3b3JrU2hhcmQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvbWVyZ2VBcnR3b3JrU2hhcmQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFFNUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVoRCxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksU0FBaUIsQ0FBQztJQUN0QixVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsU0FBUyxHQUFHLE1BQU0sV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkJBQTZCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDM0MsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sZ0JBQWdCLENBQUM7WUFDaEQsU0FBUztZQUNULFlBQVksRUFBRSxZQUFZO1lBQzFCLGNBQWMsRUFBRSxZQUFZO1lBQzVCLE1BQU0sRUFBRSxFQUFFO1lBQ1YsU0FBUyxFQUFFLFVBQVU7WUFDckIsVUFBVSxFQUFFLFlBQVk7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsR0FBRyxNQUFNLGdCQUFnQixDQUFDO1lBQ2pFLFNBQVM7WUFDVCxZQUFZLEVBQUUsWUFBWTtZQUMxQixjQUFjLEVBQUUsWUFBWTtZQUM1QixNQUFNLEVBQUUsRUFBRTtZQUNWLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUMsQ0FBQztRQUVILE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQztZQUNqRCxlQUFlLEVBQUUsY0FBYztZQUMvQixlQUFlO1lBQ2YsWUFBWSxFQUFFLFlBQVk7WUFDMUIsU0FBUyxFQUFFLFVBQVU7U0FDdEIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxXQUFXLEdBQUcsTUFBTSxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckQsTUFBTSxRQUFRLEdBQUcsTUFBTSxTQUFTLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDcEUsNkRBQTZEO1FBQzdELGFBQWE7UUFDYixNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUQsNkRBQTZEO1FBQzdELGFBQWE7UUFDYixNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiO1xuXG5pbXBvcnQgeyBtaW50QXJ0d29yayB9IGZyb20gXCIuLi9zcmMvYXJ0d29ya1wiO1xuaW1wb3J0IHsgbWludEFydHdvcmtTaGFyZCB9IGZyb20gXCIuLi9zcmMvYXJ0d29ya19zaGFyZFwiO1xuaW1wb3J0IHsgQURNSU5fQ0FQX0lELCBBRE1JTl9QSFJBU0UsIFBBQ0tBR0VfSUQsIFVTRVIxX1BIUkFTRSB9IGZyb20gXCIuLi9zcmMvY29uZmlnXCI7XG5pbXBvcnQgeyBtZXJnZUFydHdvcmtTaGFyZCB9IGZyb20gXCIuLi9zcmMvbWVyZ2VfYXJ0d29ya19zaGFyZFwiO1xuaW1wb3J0IHsgZ2V0T2JqZWN0IH0gZnJvbSBcIi4vdGVzdC1oZWxwZXJzXCI7XG5pbXBvcnQgeyBtaW50QXJ0d29ya09wdGlvbnMgfSBmcm9tIFwiLi90ZXN0ZGF0YVwiO1xuXG5kZXNjcmliZShcIm1lcmdlQXJ0d29ya1NoYXJkXCIsICgpID0+IHtcbiAgbGV0IGFydHdvcmtJZDogc3RyaW5nO1xuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhcnR3b3JrSWQgPSBhd2FpdCBtaW50QXJ0d29yayhtaW50QXJ0d29ya09wdGlvbnMpO1xuICB9KTtcblxuICBpdChcInNob3VsZCBtZXJnZSBhcnR3b3JrIHNoYXJkc1wiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgeyBhcnR3b3JrU2hhcmRJZCB9ID0gYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2lldmVyUGhyYXNlOiBVU0VSMV9QSFJBU0UsXG4gICAgICBzaGFyZXM6IDEwLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgICAgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELFxuICAgIH0pO1xuICAgIGNvbnN0IHsgYXJ0d29ya1NoYXJkSWQ6IGFydHdvcmtTaGFyZDJJZCB9ID0gYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2lldmVyUGhyYXNlOiBVU0VSMV9QSFJBU0UsXG4gICAgICBzaGFyZXM6IDEwLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgICAgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELFxuICAgIH0pO1xuXG4gICAgY29uc3QgbWVyZ2VBcnR3b3JrU2hhcmRzID0gYXdhaXQgbWVyZ2VBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya1NoYXJkMUlkOiBhcnR3b3JrU2hhcmRJZCxcbiAgICAgIGFydHdvcmtTaGFyZDJJZCxcbiAgICAgIHNpZ25lclBocmFzZTogVVNFUjFfUEhSQVNFLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgIH0pO1xuICAgIGNvbnN0IGJ1cm5lZFNoYXJkID0gYXdhaXQgZ2V0T2JqZWN0KGFydHdvcmtTaGFyZDJJZCk7XG4gICAgY29uc3QgbmV3U2hhcmQgPSBhd2FpdCBnZXRPYmplY3QobWVyZ2VBcnR3b3JrU2hhcmRzLmFydHdvcmtTaGFyZElkKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChuZXdTaGFyZC5kYXRhLmNvbnRlbnQuZmllbGRzLnNoYXJlcywgXCIyMFwiKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGFzc2VydC5zdHJpY3RFcXVhbChidXJuZWRTaGFyZC5lcnJvci5jb2RlLCBcImRlbGV0ZWRcIik7XG4gIH0pLnRpbWVvdXQoMTBfMDAwKTtcbn0pO1xuIl19