import assert from "assert";
import { mintArtwork } from "../src/artwork";
import { mintArtworkShard } from "../src/artwork_shard";
import { PACKAGE_ID } from "../src/config";
import { mergeArtworkShard } from "../src/merge_artwork_shard";
import { ADMIN_CAP_ID, ADMIN_PHRASE, getObject, USER1_ADDRESS, USER1_PHRASE } from "./test-helpers";
import { mintArtworkOptions } from "./testdata";
describe("mergeArtworkShard", () => {
    let artworkId;
    beforeEach(async () => {
        artworkId = await mintArtwork(mintArtworkOptions);
    });
    it("should merge artwork shards", async () => {
        const { artworkShardId } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 10,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const { artworkShardId: artworkShard2Id } = await mintArtworkShard({
            artworkId,
            signerPhrase: ADMIN_PHRASE,
            receiverAddress: USER1_ADDRESS,
            shares: 10,
            packageId: PACKAGE_ID,
            adminCapId: ADMIN_CAP_ID,
        });
        const mergeArtworkShards = await mergeArtworkShard({
            artworkShard1Id: artworkShardId,
            artworkShard2Id,
            signerPhrase: USER1_PHRASE,
            packageId: PACKAGE_ID,
        });
        const burnedShard = await getObject(artworkShard2Id);
        const newShard = await getObject(mergeArtworkShards.artworkShardId);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(newShard.data.content.fields.shares, "20");
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        assert.strictEqual(burnedShard.error.code, "deleted");
    }).timeout(10_000);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VBcnR3b3JrU2hhcmQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvbWVyZ2VBcnR3b3JrU2hhcmQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFFNUIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFaEQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxJQUFJLFNBQWlCLENBQUM7SUFDdEIsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLFNBQVMsR0FBRyxNQUFNLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzNDLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLGdCQUFnQixDQUFDO1lBQ2hELFNBQVM7WUFDVCxZQUFZLEVBQUUsWUFBWTtZQUMxQixlQUFlLEVBQUUsYUFBYTtZQUM5QixNQUFNLEVBQUUsRUFBRTtZQUNWLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUMsQ0FBQztRQUNILE1BQU0sRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLEdBQUcsTUFBTSxnQkFBZ0IsQ0FBQztZQUNqRSxTQUFTO1lBQ1QsWUFBWSxFQUFFLFlBQVk7WUFDMUIsZUFBZSxFQUFFLGFBQWE7WUFDOUIsTUFBTSxFQUFFLEVBQUU7WUFDVixTQUFTLEVBQUUsVUFBVTtZQUNyQixVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDLENBQUM7UUFFSCxNQUFNLGtCQUFrQixHQUFHLE1BQU0saUJBQWlCLENBQUM7WUFDakQsZUFBZSxFQUFFLGNBQWM7WUFDL0IsZUFBZTtZQUNmLFlBQVksRUFBRSxZQUFZO1lBQzFCLFNBQVMsRUFBRSxVQUFVO1NBQ3RCLENBQUMsQ0FBQztRQUNILE1BQU0sV0FBVyxHQUFHLE1BQU0sU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sUUFBUSxHQUFHLE1BQU0sU0FBUyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BFLDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlELDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckIsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIjtcblxuaW1wb3J0IHsgbWludEFydHdvcmsgfSBmcm9tIFwiLi4vc3JjL2FydHdvcmtcIjtcbmltcG9ydCB7IG1pbnRBcnR3b3JrU2hhcmQgfSBmcm9tIFwiLi4vc3JjL2FydHdvcmtfc2hhcmRcIjtcbmltcG9ydCB7IFBBQ0tBR0VfSUQgfSBmcm9tIFwiLi4vc3JjL2NvbmZpZ1wiO1xuaW1wb3J0IHsgbWVyZ2VBcnR3b3JrU2hhcmQgfSBmcm9tIFwiLi4vc3JjL21lcmdlX2FydHdvcmtfc2hhcmRcIjtcbmltcG9ydCB7IEFETUlOX0NBUF9JRCwgQURNSU5fUEhSQVNFLCBnZXRPYmplY3QsIFVTRVIxX0FERFJFU1MsIFVTRVIxX1BIUkFTRSB9IGZyb20gXCIuL3Rlc3QtaGVscGVyc1wiO1xuaW1wb3J0IHsgbWludEFydHdvcmtPcHRpb25zIH0gZnJvbSBcIi4vdGVzdGRhdGFcIjtcblxuZGVzY3JpYmUoXCJtZXJnZUFydHdvcmtTaGFyZFwiLCAoKSA9PiB7XG4gIGxldCBhcnR3b3JrSWQ6IHN0cmluZztcbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgYXJ0d29ya0lkID0gYXdhaXQgbWludEFydHdvcmsobWludEFydHdvcmtPcHRpb25zKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgbWVyZ2UgYXJ0d29yayBzaGFyZHNcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHsgYXJ0d29ya1NoYXJkSWQgfSA9IGF3YWl0IG1pbnRBcnR3b3JrU2hhcmQoe1xuICAgICAgYXJ0d29ya0lkLFxuICAgICAgc2lnbmVyUGhyYXNlOiBBRE1JTl9QSFJBU0UsXG4gICAgICByZWNlaXZlckFkZHJlc3M6IFVTRVIxX0FERFJFU1MsXG4gICAgICBzaGFyZXM6IDEwLFxuICAgICAgcGFja2FnZUlkOiBQQUNLQUdFX0lELFxuICAgICAgYWRtaW5DYXBJZDogQURNSU5fQ0FQX0lELFxuICAgIH0pO1xuICAgIGNvbnN0IHsgYXJ0d29ya1NoYXJkSWQ6IGFydHdvcmtTaGFyZDJJZCB9ID0gYXdhaXQgbWludEFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrSWQsXG4gICAgICBzaWduZXJQaHJhc2U6IEFETUlOX1BIUkFTRSxcbiAgICAgIHJlY2VpdmVyQWRkcmVzczogVVNFUjFfQUREUkVTUyxcbiAgICAgIHNoYXJlczogMTAsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgICBhZG1pbkNhcElkOiBBRE1JTl9DQVBfSUQsXG4gICAgfSk7XG5cbiAgICBjb25zdCBtZXJnZUFydHdvcmtTaGFyZHMgPSBhd2FpdCBtZXJnZUFydHdvcmtTaGFyZCh7XG4gICAgICBhcnR3b3JrU2hhcmQxSWQ6IGFydHdvcmtTaGFyZElkLFxuICAgICAgYXJ0d29ya1NoYXJkMklkLFxuICAgICAgc2lnbmVyUGhyYXNlOiBVU0VSMV9QSFJBU0UsXG4gICAgICBwYWNrYWdlSWQ6IFBBQ0tBR0VfSUQsXG4gICAgfSk7XG4gICAgY29uc3QgYnVybmVkU2hhcmQgPSBhd2FpdCBnZXRPYmplY3QoYXJ0d29ya1NoYXJkMklkKTtcbiAgICBjb25zdCBuZXdTaGFyZCA9IGF3YWl0IGdldE9iamVjdChtZXJnZUFydHdvcmtTaGFyZHMuYXJ0d29ya1NoYXJkSWQpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKG5ld1NoYXJkLmRhdGEuY29udGVudC5maWVsZHMuc2hhcmVzLCBcIjIwXCIpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGJ1cm5lZFNoYXJkLmVycm9yLmNvZGUsIFwiZGVsZXRlZFwiKTtcbiAgfSkudGltZW91dCgxMF8wMDApO1xufSk7XG4iXX0=