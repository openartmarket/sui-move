import { getExecutionStatus, TransactionBlock } from "@mysten/sui.js";
import { PACKAGE_ID } from "./config";
import { getSigner } from "./helpers";
export async function burnArtworkShard(params) {
    const { artworkShardId, artworkId, signerPhrase } = params;
    const { signer, address } = getSigner(signerPhrase);
    const tx = new TransactionBlock();
    tx.moveCall({
        target: `${PACKAGE_ID}::open_art_market::safe_burn_artwork_shard`,
        arguments: [tx.object(artworkId), tx.object(artworkShardId)],
    });
    const txRes = await signer.signAndExecuteTransactionBlock({
        transactionBlock: tx,
        requestType: "WaitForLocalExecution",
        options: {
            showEffects: true,
        },
    });
    const status = getExecutionStatus(txRes);
    if (status === undefined) {
        throw new Error("Failed to get execution status");
    }
    if (status.error) {
        throw new Error(status.error);
    }
    if (status.status !== "success") {
        throw new Error(`Transaction failed with status: ${status.status}`);
    }
    return {
        success: true,
        owner: address
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVybl9hcnR3b3JrX3NoYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2J1cm5fYXJ0d29ya19zaGFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFZdEMsTUFBTSxDQUFDLEtBQUssVUFBVSxnQkFBZ0IsQ0FBRSxNQUF3QjtJQUM5RCxNQUFNLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDM0QsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEQsTUFBTSxFQUFFLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0lBRWxDLEVBQUUsQ0FBQyxRQUFRLENBQUM7UUFDVixNQUFNLEVBQUUsR0FBRyxVQUFVLDRDQUE0QztRQUNqRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDNUQsQ0FBQyxDQUFDO0lBRUgsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsOEJBQThCLENBQUM7UUFDeEQsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixXQUFXLEVBQUUsdUJBQXVCO1FBQ3BDLE9BQU8sRUFBRTtZQUNQLFdBQVcsRUFBRSxJQUFJO1NBQ2xCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxNQUFNLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsSUFBRyxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztLQUNuRDtJQUNELElBQUcsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQy9CO0lBQ0QsSUFBRyxNQUFNLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUNyRTtJQUNELE9BQU87UUFDTCxPQUFPLEVBQUUsSUFBSTtRQUNiLEtBQUssRUFBRSxPQUFPO0tBRWYsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFeGVjdXRpb25TdGF0dXMsIFRyYW5zYWN0aW9uQmxvY2sgfSBmcm9tIFwiQG15c3Rlbi9zdWkuanNcIjtcblxuaW1wb3J0IHsgUEFDS0FHRV9JRCB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IHsgZ2V0U2lnbmVyIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuXG5leHBvcnQgdHlwZSBCdXJuQXJ0d29ya1BhcmFtcyA9IHtcbiAgYXJ0d29ya0lkOiBzdHJpbmcsXG4gIGFydHdvcmtTaGFyZElkOiBzdHJpbmcsXG4gIHNpZ25lclBocmFzZTogc3RyaW5nLFxufVxuZXhwb3J0IHR5cGUgQnVybkFydHdvcmtSZXN1bHQgPSB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW4sXG4gIG93bmVyOiBzdHJpbmdcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1cm5BcnR3b3JrU2hhcmQoIHBhcmFtczpCdXJuQXJ0d29ya1BhcmFtcyApOiBQcm9taXNlPEJ1cm5BcnR3b3JrUmVzdWx0PiB7XG4gIGNvbnN0IHsgYXJ0d29ya1NoYXJkSWQsIGFydHdvcmtJZCwgc2lnbmVyUGhyYXNlIH0gPSBwYXJhbXM7XG4gIGNvbnN0IHsgc2lnbmVyLCBhZGRyZXNzIH0gPSBnZXRTaWduZXIoc2lnbmVyUGhyYXNlKTtcbiAgY29uc3QgdHggPSBuZXcgVHJhbnNhY3Rpb25CbG9jaygpO1xuXG4gIHR4Lm1vdmVDYWxsKHtcbiAgICB0YXJnZXQ6IGAke1BBQ0tBR0VfSUR9OjpvcGVuX2FydF9tYXJrZXQ6OnNhZmVfYnVybl9hcnR3b3JrX3NoYXJkYCxcbiAgICBhcmd1bWVudHM6IFt0eC5vYmplY3QoYXJ0d29ya0lkKSx0eC5vYmplY3QoYXJ0d29ya1NoYXJkSWQpXSxcbiAgfSk7XG5cbiAgY29uc3QgdHhSZXMgPSBhd2FpdCBzaWduZXIuc2lnbkFuZEV4ZWN1dGVUcmFuc2FjdGlvbkJsb2NrKHtcbiAgICB0cmFuc2FjdGlvbkJsb2NrOiB0eCxcbiAgICByZXF1ZXN0VHlwZTogXCJXYWl0Rm9yTG9jYWxFeGVjdXRpb25cIixcbiAgICBvcHRpb25zOiB7XG4gICAgICBzaG93RWZmZWN0czogdHJ1ZSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBzdGF0dXMgPSBnZXRFeGVjdXRpb25TdGF0dXModHhSZXMpO1xuICBpZihzdGF0dXMgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgZXhlY3V0aW9uIHN0YXR1c1wiKTtcbiAgfVxuICBpZihzdGF0dXMuZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3Ioc3RhdHVzLmVycm9yKTtcbiAgfVxuICBpZihzdGF0dXMuc3RhdHVzICE9PSBcInN1Y2Nlc3NcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVHJhbnNhY3Rpb24gZmFpbGVkIHdpdGggc3RhdHVzOiAke3N0YXR1cy5zdGF0dXN9YCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdWNjZXNzOiB0cnVlLFxuICAgIG93bmVyOiBhZGRyZXNzXG5cbiAgfTtcbn1cbiJdfQ==