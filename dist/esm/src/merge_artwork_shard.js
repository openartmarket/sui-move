import { getExecutionStatus, TransactionBlock } from "@mysten/sui.js";
import { getSigner } from "./helpers";
export async function mergeArtworkShard(params) {
    const { artworkShard1Id, artworkShard2Id, signerPhrase, packageId } = params;
    const { signer, address } = getSigner(signerPhrase);
    const tx = new TransactionBlock();
    tx.moveCall({
        target: `${packageId}::open_art_market::merge_artwork_shards`,
        arguments: [tx.object(artworkShard1Id), tx.object(artworkShard2Id)],
    });
    const txRes = await signer.signAndExecuteTransactionBlock({
        transactionBlock: tx,
        requestType: "WaitForLocalExecution",
        options: {
            showEffects: true,
        },
    });
    const status = getExecutionStatus(txRes);
    if (status === undefined) {
        throw new Error("Failed to get execution status");
    }
    if (status.error) {
        throw new Error(status.error);
    }
    if (status.status !== "success") {
        throw new Error(`Transaction failed with status: ${status.status}`);
    }
    return {
        artworkShardId: artworkShard1Id,
        owner: address
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VfYXJ0d29ya19zaGFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tZXJnZV9hcnR3b3JrX3NoYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFhdEMsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FBRSxNQUE4QjtJQUNyRSxNQUFNLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQzdFLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3BELE1BQU0sRUFBRSxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztJQUVsQyxFQUFFLENBQUMsUUFBUSxDQUFDO1FBQ1YsTUFBTSxFQUFFLEdBQUcsU0FBUyx5Q0FBeUM7UUFDN0QsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBQyxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ25FLENBQUMsQ0FBQztJQUVILE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLDhCQUE4QixDQUFDO1FBQ3hELGdCQUFnQixFQUFFLEVBQUU7UUFDcEIsV0FBVyxFQUFFLHVCQUF1QjtRQUNwQyxPQUFPLEVBQUU7WUFDUCxXQUFXLEVBQUUsSUFBSTtTQUNsQjtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sTUFBTSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLElBQUcsTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7S0FDbkQ7SUFDRCxJQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDZixNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMvQjtJQUNELElBQUcsTUFBTSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7UUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDckU7SUFDRCxPQUFPO1FBQ0wsY0FBYyxFQUFFLGVBQWU7UUFDL0IsS0FBSyxFQUFFLE9BQU87S0FFZixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEV4ZWN1dGlvblN0YXR1cywgVHJhbnNhY3Rpb25CbG9jayB9IGZyb20gXCJAbXlzdGVuL3N1aS5qc1wiO1xuXG5pbXBvcnQgeyBnZXRTaWduZXIgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbmV4cG9ydCB0eXBlIE1lcmdlQXJ0d29ya1NoYXJkUGFyYW1zID0ge1xuICBwYWNrYWdlSWQ6IHN0cmluZztcbiAgYXJ0d29ya1NoYXJkMUlkOiBzdHJpbmcsXG4gIGFydHdvcmtTaGFyZDJJZDogc3RyaW5nLFxuICBzaWduZXJQaHJhc2U6IHN0cmluZyxcbn1cbmV4cG9ydCB0eXBlIE1lcmdlQXJ0d29ya1NoYXJkUmVzdWx0ID0ge1xuICBhcnR3b3JrU2hhcmRJZDogc3RyaW5nLFxuICBvd25lcjogc3RyaW5nXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtZXJnZUFydHdvcmtTaGFyZCggcGFyYW1zOk1lcmdlQXJ0d29ya1NoYXJkUGFyYW1zICk6IFByb21pc2U8TWVyZ2VBcnR3b3JrU2hhcmRSZXN1bHQ+IHtcbiAgY29uc3QgeyBhcnR3b3JrU2hhcmQxSWQsIGFydHdvcmtTaGFyZDJJZCwgc2lnbmVyUGhyYXNlLCBwYWNrYWdlSWQgfSA9IHBhcmFtcztcbiAgY29uc3QgeyBzaWduZXIsIGFkZHJlc3MgfSA9IGdldFNpZ25lcihzaWduZXJQaHJhc2UpO1xuICBjb25zdCB0eCA9IG5ldyBUcmFuc2FjdGlvbkJsb2NrKCk7XG5cbiAgdHgubW92ZUNhbGwoe1xuICAgIHRhcmdldDogYCR7cGFja2FnZUlkfTo6b3Blbl9hcnRfbWFya2V0OjptZXJnZV9hcnR3b3JrX3NoYXJkc2AsXG4gICAgYXJndW1lbnRzOiBbdHgub2JqZWN0KGFydHdvcmtTaGFyZDFJZCksdHgub2JqZWN0KGFydHdvcmtTaGFyZDJJZCldLFxuICB9KTtcblxuICBjb25zdCB0eFJlcyA9IGF3YWl0IHNpZ25lci5zaWduQW5kRXhlY3V0ZVRyYW5zYWN0aW9uQmxvY2soe1xuICAgIHRyYW5zYWN0aW9uQmxvY2s6IHR4LFxuICAgIHJlcXVlc3RUeXBlOiBcIldhaXRGb3JMb2NhbEV4ZWN1dGlvblwiLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHNob3dFZmZlY3RzOiB0cnVlLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHN0YXR1cyA9IGdldEV4ZWN1dGlvblN0YXR1cyh0eFJlcyk7XG4gIGlmKHN0YXR1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdldCBleGVjdXRpb24gc3RhdHVzXCIpO1xuICB9XG4gIGlmKHN0YXR1cy5lcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihzdGF0dXMuZXJyb3IpO1xuICB9XG4gIGlmKHN0YXR1cy5zdGF0dXMgIT09IFwic3VjY2Vzc1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUcmFuc2FjdGlvbiBmYWlsZWQgd2l0aCBzdGF0dXM6ICR7c3RhdHVzLnN0YXR1c31gKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFydHdvcmtTaGFyZElkOiBhcnR3b3JrU2hhcmQxSWQsXG4gICAgb3duZXI6IGFkZHJlc3NcblxuICB9O1xufVxuIl19