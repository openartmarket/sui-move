import { getExecutionStatus, TransactionBlock } from "@mysten/sui.js";
import { findObjectIdWithOwnerAddress } from "./findObjectIdWithOwnerAddress";
import { getSigner } from "./helpers";
export async function splitArtworkShard(params) {
    const { artworkShardId, signerPhrase, shares, packageId } = params;
    const { signer, address } = getSigner(signerPhrase);
    const tx = new TransactionBlock();
    tx.moveCall({
        target: `${packageId}::open_art_market::split_artwork_shard`,
        arguments: [tx.object(artworkShardId), tx.pure(shares)],
    });
    const txRes = await signer.signAndExecuteTransactionBlock({
        transactionBlock: tx,
        requestType: "WaitForLocalExecution",
        options: {
            showEffects: true,
        },
    });
    const status = getExecutionStatus(txRes);
    if (status === undefined) {
        throw new Error("Failed to get execution status");
    }
    if (status.error) {
        throw new Error(status.error);
    }
    if (status.status !== "success") {
        throw new Error(`Transaction failed with status: ${status.status}`);
    }
    const newArtworkShardId = findObjectIdWithOwnerAddress(txRes, address);
    return {
        artworkShardId: newArtworkShardId,
        owner: address
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXRfYXJ0d29ya19zaGFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zcGxpdF9hcnR3b3JrX3NoYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXRFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFhdEMsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FBRSxNQUE4QjtJQUNyRSxNQUFNLEVBQUUsY0FBYyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQ25FLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3BELE1BQU0sRUFBRSxHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztJQUVsQyxFQUFFLENBQUMsUUFBUSxDQUFDO1FBQ1YsTUFBTSxFQUFFLEdBQUcsU0FBUyx3Q0FBd0M7UUFDNUQsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3hELENBQUMsQ0FBQztJQUVILE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLDhCQUE4QixDQUFDO1FBQ3hELGdCQUFnQixFQUFFLEVBQUU7UUFDcEIsV0FBVyxFQUFFLHVCQUF1QjtRQUNwQyxPQUFPLEVBQUU7WUFDUCxXQUFXLEVBQUUsSUFBSTtTQUNsQjtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sTUFBTSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLElBQUcsTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7S0FDbkQ7SUFDRCxJQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDZixNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMvQjtJQUNELElBQUcsTUFBTSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7UUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDckU7SUFDRCxNQUFNLGlCQUFpQixHQUFHLDRCQUE0QixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RSxPQUFPO1FBQ0wsY0FBYyxFQUFFLGlCQUFpQjtRQUNqQyxLQUFLLEVBQUUsT0FBTztLQUNmLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RXhlY3V0aW9uU3RhdHVzLCBUcmFuc2FjdGlvbkJsb2NrIH0gZnJvbSBcIkBteXN0ZW4vc3VpLmpzXCI7XG5cbmltcG9ydCB7IGZpbmRPYmplY3RJZFdpdGhPd25lckFkZHJlc3MgfSBmcm9tIFwiLi9maW5kT2JqZWN0SWRXaXRoT3duZXJBZGRyZXNzXCI7XG5pbXBvcnQgeyBnZXRTaWduZXIgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbmV4cG9ydCB0eXBlIFNwbGl0QXJ0d29ya1NoYXJkUGFyYW1zID0ge1xuICBwYWNrYWdlSWQ6IHN0cmluZztcbiAgYXJ0d29ya1NoYXJkSWQ6IHN0cmluZyxcbiAgc2lnbmVyUGhyYXNlOiBzdHJpbmcsXG4gIHNoYXJlczogbnVtYmVyXG59XG5leHBvcnQgdHlwZSBTcGxpdEFydHdvcmtTaGFyZFJlc3VsdCA9IHtcbiAgYXJ0d29ya1NoYXJkSWQ6IHN0cmluZyxcbiAgb3duZXI6IHN0cmluZ1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3BsaXRBcnR3b3JrU2hhcmQoIHBhcmFtczpTcGxpdEFydHdvcmtTaGFyZFBhcmFtcyApOiBQcm9taXNlPFNwbGl0QXJ0d29ya1NoYXJkUmVzdWx0PiB7XG4gIGNvbnN0IHsgYXJ0d29ya1NoYXJkSWQsIHNpZ25lclBocmFzZSwgc2hhcmVzLCBwYWNrYWdlSWQgfSA9IHBhcmFtcztcbiAgY29uc3QgeyBzaWduZXIsIGFkZHJlc3MgfSA9IGdldFNpZ25lcihzaWduZXJQaHJhc2UpO1xuICBjb25zdCB0eCA9IG5ldyBUcmFuc2FjdGlvbkJsb2NrKCk7XG5cbiAgdHgubW92ZUNhbGwoe1xuICAgIHRhcmdldDogYCR7cGFja2FnZUlkfTo6b3Blbl9hcnRfbWFya2V0OjpzcGxpdF9hcnR3b3JrX3NoYXJkYCxcbiAgICBhcmd1bWVudHM6IFt0eC5vYmplY3QoYXJ0d29ya1NoYXJkSWQpLCB0eC5wdXJlKHNoYXJlcyldLFxuICB9KTtcblxuICBjb25zdCB0eFJlcyA9IGF3YWl0IHNpZ25lci5zaWduQW5kRXhlY3V0ZVRyYW5zYWN0aW9uQmxvY2soe1xuICAgIHRyYW5zYWN0aW9uQmxvY2s6IHR4LFxuICAgIHJlcXVlc3RUeXBlOiBcIldhaXRGb3JMb2NhbEV4ZWN1dGlvblwiLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHNob3dFZmZlY3RzOiB0cnVlLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHN0YXR1cyA9IGdldEV4ZWN1dGlvblN0YXR1cyh0eFJlcyk7XG4gIGlmKHN0YXR1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdldCBleGVjdXRpb24gc3RhdHVzXCIpO1xuICB9XG4gIGlmKHN0YXR1cy5lcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihzdGF0dXMuZXJyb3IpO1xuICB9XG4gIGlmKHN0YXR1cy5zdGF0dXMgIT09IFwic3VjY2Vzc1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUcmFuc2FjdGlvbiBmYWlsZWQgd2l0aCBzdGF0dXM6ICR7c3RhdHVzLnN0YXR1c31gKTtcbiAgfVxuICBjb25zdCBuZXdBcnR3b3JrU2hhcmRJZCA9IGZpbmRPYmplY3RJZFdpdGhPd25lckFkZHJlc3ModHhSZXMsIGFkZHJlc3MpO1xuICByZXR1cm4ge1xuICAgIGFydHdvcmtTaGFyZElkOiBuZXdBcnR3b3JrU2hhcmRJZCxcbiAgICBvd25lcjogYWRkcmVzc1xuICB9O1xufVxuIl19