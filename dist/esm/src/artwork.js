import { getCreatedObjects, TransactionBlock } from "@mysten/sui.js";
import { getSigner } from "./helpers";
/**
 * Mints a new artwork
 * @param params
 * @returns the artwork id
 */
export async function mintArtwork(params) {
    const { adminCapId, packageId, signerPhrase, totalSupply, sharePrice, multiplier, name, artist, creationDate, description, currency, image } = params;
    // console.log("Mint artwork: %s", name + " by " + artist);
    const { signer } = getSigner(signerPhrase);
    const tx = new TransactionBlock();
    tx.moveCall({
        target: `${packageId}::open_art_market::mint_artwork_and_share`,
        arguments: [
            tx.object(adminCapId),
            tx.pure(totalSupply),
            tx.pure(sharePrice),
            tx.pure(multiplier),
            tx.pure(name),
            tx.pure(artist),
            tx.pure(creationDate),
            tx.pure(description),
            tx.pure(currency),
            tx.pure(image),
        ],
    });
    const txRes = await signer.signAndExecuteTransactionBlock({
        transactionBlock: tx,
        requestType: "WaitForLocalExecution",
        options: {
            showObjectChanges: true,
            showEffects: true,
        },
    });
    const artworkId = getCreatedObjects(txRes)?.[0].reference.objectId;
    if (!artworkId)
        throw new Error("Could not mint artwork");
    return artworkId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0d29yay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcnR3b3JrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFtQnRDOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLFdBQVcsQ0FBQyxNQUF5QjtJQUN6RCxNQUFNLEVBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FDekksTUFBTSxDQUFDO0lBRVQsMkRBQTJEO0lBRTNELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0MsTUFBTSxFQUFFLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0lBRWxDLEVBQUUsQ0FBQyxRQUFRLENBQUM7UUFDVixNQUFNLEVBQUUsR0FBRyxTQUFTLDJDQUEyQztRQUMvRCxTQUFTLEVBQUU7WUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztZQUNyQixFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUNwQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNuQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNuQixFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNiLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ2YsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDckIsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDcEIsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDakIsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDZjtLQUNGLENBQUMsQ0FBQztJQUVILE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLDhCQUE4QixDQUFDO1FBQ3hELGdCQUFnQixFQUFFLEVBQUU7UUFDcEIsV0FBVyxFQUFFLHVCQUF1QjtRQUNwQyxPQUFPLEVBQUU7WUFDUCxpQkFBaUIsRUFBRSxJQUFJO1lBQ3ZCLFdBQVcsRUFBRSxJQUFJO1NBQ2xCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBQ25FLElBQUksQ0FBQyxTQUFTO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBRTFELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDcmVhdGVkT2JqZWN0cywgVHJhbnNhY3Rpb25CbG9jayB9IGZyb20gXCJAbXlzdGVuL3N1aS5qc1wiO1xuXG5pbXBvcnQgeyBnZXRTaWduZXIgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbmV4cG9ydCB0eXBlIEN1cnJlbmN5ID0gXCJVU0RcIiB8IFwiRVVSXCIgfCBcIkdCUFwiIHwgXCJOT0tcIiA7XG5cbmV4cG9ydCB0eXBlIE1pbnRBcnR3b3JrUGFyYW1zID0ge1xuICBzaWduZXJQaHJhc2U6IHN0cmluZztcbiAgcGFja2FnZUlkOiBzdHJpbmc7XG4gIGFkbWluQ2FwSWQ6IHN0cmluZztcbiAgdG90YWxTdXBwbHk6IG51bWJlcjtcbiAgc2hhcmVQcmljZTogbnVtYmVyO1xuICBtdWx0aXBsaWVyOiBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcbiAgYXJ0aXN0OiBzdHJpbmc7XG4gIGNyZWF0aW9uRGF0ZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBjdXJyZW5jeTogQ3VycmVuY3k7XG4gIGltYWdlOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIE1pbnRzIGEgbmV3IGFydHdvcmtcbiAqIEBwYXJhbSBwYXJhbXNcbiAqIEByZXR1cm5zIHRoZSBhcnR3b3JrIGlkXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtaW50QXJ0d29yayhwYXJhbXM6IE1pbnRBcnR3b3JrUGFyYW1zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3Qge2FkbWluQ2FwSWQsIHBhY2thZ2VJZCwgc2lnbmVyUGhyYXNlLCB0b3RhbFN1cHBseSwgc2hhcmVQcmljZSwgbXVsdGlwbGllciwgbmFtZSwgYXJ0aXN0LCBjcmVhdGlvbkRhdGUsIGRlc2NyaXB0aW9uLCBjdXJyZW5jeSwgaW1hZ2UgfSA9XG4gICAgcGFyYW1zO1xuXG4gIC8vIGNvbnNvbGUubG9nKFwiTWludCBhcnR3b3JrOiAlc1wiLCBuYW1lICsgXCIgYnkgXCIgKyBhcnRpc3QpO1xuXG4gIGNvbnN0IHsgc2lnbmVyIH0gPSBnZXRTaWduZXIoc2lnbmVyUGhyYXNlKTtcbiAgY29uc3QgdHggPSBuZXcgVHJhbnNhY3Rpb25CbG9jaygpO1xuXG4gIHR4Lm1vdmVDYWxsKHtcbiAgICB0YXJnZXQ6IGAke3BhY2thZ2VJZH06Om9wZW5fYXJ0X21hcmtldDo6bWludF9hcnR3b3JrX2FuZF9zaGFyZWAsXG4gICAgYXJndW1lbnRzOiBbXG4gICAgICB0eC5vYmplY3QoYWRtaW5DYXBJZCksXG4gICAgICB0eC5wdXJlKHRvdGFsU3VwcGx5KSxcbiAgICAgIHR4LnB1cmUoc2hhcmVQcmljZSksXG4gICAgICB0eC5wdXJlKG11bHRpcGxpZXIpLFxuICAgICAgdHgucHVyZShuYW1lKSxcbiAgICAgIHR4LnB1cmUoYXJ0aXN0KSxcbiAgICAgIHR4LnB1cmUoY3JlYXRpb25EYXRlKSxcbiAgICAgIHR4LnB1cmUoZGVzY3JpcHRpb24pLFxuICAgICAgdHgucHVyZShjdXJyZW5jeSksXG4gICAgICB0eC5wdXJlKGltYWdlKSxcbiAgICBdLFxuICB9KTtcblxuICBjb25zdCB0eFJlcyA9IGF3YWl0IHNpZ25lci5zaWduQW5kRXhlY3V0ZVRyYW5zYWN0aW9uQmxvY2soe1xuICAgIHRyYW5zYWN0aW9uQmxvY2s6IHR4LFxuICAgIHJlcXVlc3RUeXBlOiBcIldhaXRGb3JMb2NhbEV4ZWN1dGlvblwiLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHNob3dPYmplY3RDaGFuZ2VzOiB0cnVlLFxuICAgICAgc2hvd0VmZmVjdHM6IHRydWUsXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgYXJ0d29ya0lkID0gZ2V0Q3JlYXRlZE9iamVjdHModHhSZXMpPy5bMF0ucmVmZXJlbmNlLm9iamVjdElkO1xuICBpZiAoIWFydHdvcmtJZCkgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IG1pbnQgYXJ0d29ya1wiKTtcblxuICByZXR1cm4gYXJ0d29ya0lkO1xufVxuXG4iXX0=