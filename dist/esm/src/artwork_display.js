import { TransactionBlock } from "@mysten/sui.js";
import { ADMIN_PHRASE, PUBLISHER_ID } from "../test/test-helpers";
import { ARTWORK_TYPE } from "./config";
import { getSigner } from "./helpers";
// This is the function you can update to change the display fields
function getArtworkDisplayFields(imageProviderUrlPrefix = "", imageProviderUrlPostfix = "") {
    return {
        keys: ["name", "description", "currency", "image_url", "project_url"],
        values: [
            "{name}",
            "{description}",
            "{currency}",
            `${imageProviderUrlPrefix}{image_url}${imageProviderUrlPostfix}`,
            "https://www.openartmarket.com/",
        ],
    };
}
async function createArtworkDisplay() {
    const artworkDisplayFields = getArtworkDisplayFields();
    const tx = new TransactionBlock();
    const { signer, address } = getSigner(ADMIN_PHRASE);
    const artworkDisplay = tx.moveCall({
        target: "0x2::display::new_with_fields",
        arguments: [
            tx.object(PUBLISHER_ID),
            tx.pure(artworkDisplayFields.keys),
            tx.pure(artworkDisplayFields.values),
        ],
        typeArguments: [ARTWORK_TYPE],
    });
    tx.moveCall({
        target: "0x2::display::update_version",
        arguments: [artworkDisplay],
        typeArguments: [ARTWORK_TYPE],
    });
    tx.transferObjects([artworkDisplay], tx.pure(address));
    await signer.signAndExecuteTransactionBlock({
        transactionBlock: tx,
        requestType: "WaitForLocalExecution",
        options: {
            showEffects: true,
        },
    });
}
createArtworkDisplay();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0d29ya19kaXNwbGF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FydHdvcmtfZGlzcGxheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV0QyxtRUFBbUU7QUFDbkUsU0FBUyx1QkFBdUIsQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLEVBQUUsdUJBQXVCLEdBQUcsRUFBRTtJQUN4RixPQUFPO1FBQ0wsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLGFBQWEsQ0FBQztRQUNyRSxNQUFNLEVBQUU7WUFDTixRQUFRO1lBQ1IsZUFBZTtZQUNmLFlBQVk7WUFDWixHQUFHLHNCQUFzQixjQUFjLHVCQUF1QixFQUFFO1lBQ2hFLGdDQUFnQztTQUNqQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsS0FBSyxVQUFVLG9CQUFvQjtJQUNqQyxNQUFNLG9CQUFvQixHQUFHLHVCQUF1QixFQUFFLENBQUM7SUFFdkQsTUFBTSxFQUFFLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2xDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRXBELE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUM7UUFDakMsTUFBTSxFQUFFLCtCQUErQjtRQUN2QyxTQUFTLEVBQUU7WUFDVCxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztZQUN2QixFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQztZQUNsQyxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztTQUNyQztRQUNELGFBQWEsRUFBRSxDQUFDLFlBQVksQ0FBQztLQUM5QixDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsUUFBUSxDQUFDO1FBQ1YsTUFBTSxFQUFFLDhCQUE4QjtRQUN0QyxTQUFTLEVBQUUsQ0FBQyxjQUFjLENBQUM7UUFDM0IsYUFBYSxFQUFFLENBQUMsWUFBWSxDQUFDO0tBQzlCLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxNQUFNLENBQUMsOEJBQThCLENBQUM7UUFDMUMsZ0JBQWdCLEVBQUUsRUFBRTtRQUNwQixXQUFXLEVBQUUsdUJBQXVCO1FBQ3BDLE9BQU8sRUFBRTtZQUNQLFdBQVcsRUFBRSxJQUFJO1NBQ2xCO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELG9CQUFvQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc2FjdGlvbkJsb2NrIH0gZnJvbSBcIkBteXN0ZW4vc3VpLmpzXCI7XG5cbmltcG9ydCB7IEFETUlOX1BIUkFTRSwgUFVCTElTSEVSX0lEIH0gZnJvbSBcIi4uL3Rlc3QvdGVzdC1oZWxwZXJzXCI7XG5pbXBvcnQgeyBBUlRXT1JLX1RZUEUgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IGdldFNpZ25lciB9IGZyb20gXCIuL2hlbHBlcnNcIjtcblxuLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24geW91IGNhbiB1cGRhdGUgdG8gY2hhbmdlIHRoZSBkaXNwbGF5IGZpZWxkc1xuZnVuY3Rpb24gZ2V0QXJ0d29ya0Rpc3BsYXlGaWVsZHMoaW1hZ2VQcm92aWRlclVybFByZWZpeCA9IFwiXCIsIGltYWdlUHJvdmlkZXJVcmxQb3N0Zml4ID0gXCJcIikge1xuICByZXR1cm4ge1xuICAgIGtleXM6IFtcIm5hbWVcIiwgXCJkZXNjcmlwdGlvblwiLCBcImN1cnJlbmN5XCIsIFwiaW1hZ2VfdXJsXCIsIFwicHJvamVjdF91cmxcIl0sXG4gICAgdmFsdWVzOiBbXG4gICAgICBcIntuYW1lfVwiLFxuICAgICAgXCJ7ZGVzY3JpcHRpb259XCIsXG4gICAgICBcIntjdXJyZW5jeX1cIixcbiAgICAgIGAke2ltYWdlUHJvdmlkZXJVcmxQcmVmaXh9e2ltYWdlX3VybH0ke2ltYWdlUHJvdmlkZXJVcmxQb3N0Zml4fWAsXG4gICAgICBcImh0dHBzOi8vd3d3Lm9wZW5hcnRtYXJrZXQuY29tL1wiLFxuICAgIF0sXG4gIH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUFydHdvcmtEaXNwbGF5KCkge1xuICBjb25zdCBhcnR3b3JrRGlzcGxheUZpZWxkcyA9IGdldEFydHdvcmtEaXNwbGF5RmllbGRzKCk7XG5cbiAgY29uc3QgdHggPSBuZXcgVHJhbnNhY3Rpb25CbG9jaygpO1xuICBjb25zdCB7IHNpZ25lciwgYWRkcmVzcyB9ID0gZ2V0U2lnbmVyKEFETUlOX1BIUkFTRSk7XG5cbiAgY29uc3QgYXJ0d29ya0Rpc3BsYXkgPSB0eC5tb3ZlQ2FsbCh7XG4gICAgdGFyZ2V0OiBcIjB4Mjo6ZGlzcGxheTo6bmV3X3dpdGhfZmllbGRzXCIsXG4gICAgYXJndW1lbnRzOiBbXG4gICAgICB0eC5vYmplY3QoUFVCTElTSEVSX0lEKSxcbiAgICAgIHR4LnB1cmUoYXJ0d29ya0Rpc3BsYXlGaWVsZHMua2V5cyksXG4gICAgICB0eC5wdXJlKGFydHdvcmtEaXNwbGF5RmllbGRzLnZhbHVlcyksXG4gICAgXSxcbiAgICB0eXBlQXJndW1lbnRzOiBbQVJUV09SS19UWVBFXSxcbiAgfSk7XG5cbiAgdHgubW92ZUNhbGwoe1xuICAgIHRhcmdldDogXCIweDI6OmRpc3BsYXk6OnVwZGF0ZV92ZXJzaW9uXCIsXG4gICAgYXJndW1lbnRzOiBbYXJ0d29ya0Rpc3BsYXldLFxuICAgIHR5cGVBcmd1bWVudHM6IFtBUlRXT1JLX1RZUEVdLFxuICB9KTtcblxuICB0eC50cmFuc2Zlck9iamVjdHMoW2FydHdvcmtEaXNwbGF5XSwgdHgucHVyZShhZGRyZXNzKSk7XG4gIGF3YWl0IHNpZ25lci5zaWduQW5kRXhlY3V0ZVRyYW5zYWN0aW9uQmxvY2soe1xuICAgIHRyYW5zYWN0aW9uQmxvY2s6IHR4LFxuICAgIHJlcXVlc3RUeXBlOiBcIldhaXRGb3JMb2NhbEV4ZWN1dGlvblwiLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHNob3dFZmZlY3RzOiB0cnVlLFxuICAgIH0sXG4gIH0pO1xufVxuXG5jcmVhdGVBcnR3b3JrRGlzcGxheSgpO1xuIl19